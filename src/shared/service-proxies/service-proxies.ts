/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.8.6231.38725 (NJsonSchema v7.7.6231.35489) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as moment from 'moment';

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/IsTenantAvailable";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processIsTenantAvailable(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantAvailable(response));
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response);
        });
    }

    protected processIsTenantAvailable(response: Response): IsTenantAvailableOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/Register";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRegister(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegister(response));
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): RegisterOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/SendPasswordResetCode";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSendPasswordResetCode(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendPasswordResetCode(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendPasswordResetCode(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetPassword(input: ResetPasswordInput): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/ResetPassword";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetPassword(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetPassword(response));
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>Observable.throw(response);
        });
    }

    protected processResetPassword(response: Response): ResetPasswordOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ResetPasswordOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/SendEmailActivationLink";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSendEmailActivationLink(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendEmailActivationLink(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendEmailActivationLink(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    activateEmail(input: ActivateEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/ActivateEmail";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processActivateEmail(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processActivateEmail(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processActivateEmail(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    impersonate(input: ImpersonateInput): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/Impersonate";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processImpersonate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processImpersonate(response));
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response);
        });
    }

    protected processImpersonate(response: Response): ImpersonateOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/BackToImpersonator";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processBackToImpersonator(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processBackToImpersonator(response));
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response);
        });
    }

    protected processBackToImpersonator(response: Response): ImpersonateOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Account/SwitchToLinkedAccount";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSwitchToLinkedAccount(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSwitchToLinkedAccount(response));
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(response);
        });
    }

    protected processSwitchToLinkedAccount(response: Response): SwitchToLinkedAccountOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SwitchToLinkedAccountOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAuditLogs(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/AuditLog/GetAuditLogs?";
        if (startDate !== undefined)
        
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        
        if (endDate !== undefined)
        
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        
        if (userName !== undefined)
        
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        
        if (serviceName !== undefined)
        
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        
        if (methodName !== undefined)
        
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        
        if (browserInfo !== undefined)
        
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        
        if (hasException !== undefined)
        
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        
        if (minExecutionDuration !== undefined)
        
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        
        if (maxExecutionDuration !== undefined)
        
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogs(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogs(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogs(response: Response): PagedResultDtoOfAuditLogListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/Platform/AuditLog/GetAuditLogsToExcel?";
        if (startDate !== undefined)
        
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        
        if (endDate !== undefined)
        
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        
        if (userName !== undefined)
        
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        
        if (serviceName !== undefined)
        
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        
        if (methodName !== undefined)
        
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        
        if (browserInfo !== undefined)
        
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        
        if (hasException !== undefined)
        
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        
        if (minExecutionDuration !== undefined)
        
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        
        if (maxExecutionDuration !== undefined)
        
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogsToExcel(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogsToExcel(response));
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogsToExcel(response: Response): FileDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Caching/GetAllCaches";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAllCaches(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllCaches(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllCaches(response: Response): ListResultDtoOfCacheDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfCacheDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    clearCache(input: EntityDtoOfString): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Caching/ClearCache";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processClearCache(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearCache(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearCache(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Caching/ClearAllCaches";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processClearAllCaches(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearAllCaches(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearAllCaches(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class ChatServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getUserChatFriendsWithSettings(): Observable<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Chat/GetUserChatFriendsWithSettings";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserChatFriendsWithSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserChatFriendsWithSettings(response));
                } catch (e) {
                    return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: Response): GetUserChatFriendsWithSettingsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetUserChatFriendsWithSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserChatFriendsWithSettingsOutput.fromJS(resultData200) : new GetUserChatFriendsWithSettingsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserChatMessages(tenantId: number, userId: number, minMessageId: number): Observable<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Chat/GetUserChatMessages?";
        if (tenantId !== undefined)
        
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        
        if (userId !== undefined)
        
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (minMessageId !== undefined)
        
            url_ += "MinMessageId=" + encodeURIComponent("" + minMessageId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserChatMessages(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserChatMessages(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(response);
        });
    }

    protected processGetUserChatMessages(response: Response): ListResultDtoOfChatMessageDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfChatMessageDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfChatMessageDto.fromJS(resultData200) : new ListResultDtoOfChatMessageDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(input: MarkAllUnreadMessagesOfUserAsReadInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Chat/MarkAllUnreadMessagesOfUserAsRead";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMarkAllUnreadMessagesOfUserAsRead(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getEditionsForCombobox(): Observable<ListResultDtoOfComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/Platform/CommonLookup/GetEditionsForCombobox";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetEditionsForCombobox(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionsForCombobox(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfComboboxItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfComboboxItemDto>><any>Observable.throw(response);
        });
    }

    protected processGetEditionsForCombobox(response: Response): ListResultDtoOfComboboxItemDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfComboboxItemDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfComboboxItemDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    findUsers(input: FindUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/Platform/CommonLookup/FindUsers";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFindUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processFindUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response);
        });
    }

    protected processFindUsers(response: Response): PagedResultDtoOfNameValueDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/CommonLookup/GetDefaultEditionName";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetDefaultEditionName(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetDefaultEditionName(response));
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(response);
        });
    }

    protected processGetDefaultEditionName(response: Response): GetDefaultEditionNameOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetDefaultEditionNameOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class CreditReportServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getLastCreditReport(dateTime: moment.Moment): Observable<CreditReportOutput> {
        let url_ = this.baseUrl + "/api/services/CreditReport/CreditReport/GetLastCreditReport?";
        if (dateTime !== undefined)
        
            url_ += "DateTime=" + encodeURIComponent("" + dateTime.toJSON()) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLastCreditReport(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLastCreditReport(response));
                } catch (e) {
                    return <Observable<CreditReportOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<CreditReportOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLastCreditReport(response: Response): CreditReportOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CreditReportOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreditReportOutput.fromJS(resultData200) : new CreditReportOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAccountInfo(creditReport: number, accountIds: number[]): Observable<AccountInfoDto[]> {
        let url_ = this.baseUrl + "/api/services/CreditReport/CreditReport/GetAccountInfo?";
        if (creditReport !== undefined)
        
            url_ += "creditReport=" + encodeURIComponent("" + creditReport) + "&"; 
        
        if (accountIds !== undefined)
        
            accountIds.forEach(item => { url_ += "accountIds=" + encodeURIComponent("" + item) + "&"; });

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAccountInfo(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAccountInfo(response));
                } catch (e) {
                    return <Observable<AccountInfoDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<AccountInfoDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetAccountInfo(response: Response): AccountInfoDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AccountInfoDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AccountInfoDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    loadAlerts(): Observable<AlertDto[]> {
        let url_ = this.baseUrl + "/api/services/CreditReport/CreditReport/LoadAlerts";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLoadAlerts(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLoadAlerts(response));
                } catch (e) {
                    return <Observable<AlertDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<AlertDto[]>><any>Observable.throw(response);
        });
    }

    protected processLoadAlerts(response: Response): AlertDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AlertDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AlertDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Edition/GetEditions";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetEditions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditions(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(response);
        });
    }

    protected processGetEditions(response: Response): ListResultDtoOfEditionListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfEditionListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getEditionForEdit(id: number): Observable<GetEditionForEditOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Edition/GetEditionForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetEditionForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionForEdit(response));
                } catch (e) {
                    return <Observable<GetEditionForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetEditionForEdit(response: Response): GetEditionForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetEditionForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionForEditOutput.fromJS(resultData200) : new GetEditionForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Edition/CreateOrUpdateEdition";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateOrUpdateEdition(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateEdition(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateEdition(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteEdition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Edition/DeleteEdition?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteEdition(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteEdition(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteEdition(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/Platform/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
        
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetEditionComboboxItems(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionComboboxItems(response));
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetEditionComboboxItems(response: Response): ComboboxItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class FriendshipServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    createFriendshipRequest(input: CreateFriendshipRequestInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Friendship/CreateFriendshipRequest";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateFriendshipRequest(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateFriendshipRequest(response));
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response);
        });
    }

    protected processCreateFriendshipRequest(response: Response): FriendDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createFriendshipRequestByUserName(input: CreateFriendshipRequestByUserNameInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Friendship/CreateFriendshipRequestByUserName";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateFriendshipRequestByUserName(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateFriendshipRequestByUserName(response));
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: Response): FriendDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    blockUser(input: BlockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Friendship/BlockUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processBlockUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processBlockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processBlockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unblockUser(input: UnblockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Friendship/UnblockUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnblockUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnblockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnblockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Friendship/AcceptFriendshipRequest";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAcceptFriendshipRequest(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAcceptFriendshipRequest(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAcceptFriendshipRequest(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/Platform/HostSettings/GetAllSettings";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAllSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllSettings(response));
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllSettings(response: Response): HostSettingsEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: HostSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/HostSettings/UpdateAllSettings";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateAllSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateAllSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateAllSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/HostSettings/SendTestEmail";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSendTestEmail(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendTestEmail(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendTestEmail(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class KBAServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    requestKBA(input: RequestKBAInput): Observable<RequestKBAOutput> {
        let url_ = this.baseUrl + "/api/services/CreditReport/KBA/RequestKBA";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRequestKBA(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRequestKBA(response));
                } catch (e) {
                    return <Observable<RequestKBAOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RequestKBAOutput>><any>Observable.throw(response);
        });
    }

    protected processRequestKBA(response: Response): RequestKBAOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RequestKBAOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestKBAOutput.fromJS(resultData200) : new RequestKBAOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    processKBAResponse(input: KBAResult): Observable<void> {
        let url_ = this.baseUrl + "/api/services/CreditReport/KBA/ProcessKBAResponse";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processProcessKBAResponse(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processProcessKBAResponse(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processProcessKBAResponse(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/GetLanguages";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLanguages(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguages(response));
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLanguages(response: Response): GetLanguagesOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetLanguagesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLanguageForEdit(id: number): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/GetLanguageForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLanguageForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguageForEdit(response));
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLanguageForEdit(response: Response): GetLanguageForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetLanguageForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/CreateOrUpdateLanguage";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateOrUpdateLanguage(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteLanguage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/DeleteLanguage?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteLanguage(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/SetDefaultLanguage";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetDefaultLanguage(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetDefaultLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetDefaultLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLanguageTexts(maxResultCount: number, skipCount: number, sorting: string, sourceName: string, baseLanguageName: string, targetLanguageName: string, targetValueFilter: string, filterText: string): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/GetLanguageTexts?";
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (sourceName !== undefined)
        
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        
        if (baseLanguageName !== undefined)
        
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        
        if (targetLanguageName !== undefined)
        
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        
        if (targetValueFilter !== undefined)
        
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        
        if (filterText !== undefined)
        
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLanguageTexts(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguageTexts(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(response);
        });
    }

    protected processGetLanguageTexts(response: Response): PagedResultDtoOfLanguageTextListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfLanguageTextListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Language/UpdateLanguageText";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateLanguageText(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateLanguageText(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateLanguageText(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class MemberServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    submitMemberInfo(memberInfo: MemberInfoDto): Observable<SubmitMemberInfoResultDto> {
        let url_ = this.baseUrl + "/api/services/CreditReport/Member/SubmitMemberInfo";

        const content_ = JSON.stringify(memberInfo ? memberInfo.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSubmitMemberInfo(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSubmitMemberInfo(response));
                } catch (e) {
                    return <Observable<SubmitMemberInfoResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubmitMemberInfoResultDto>><any>Observable.throw(response);
        });
    }

    protected processSubmitMemberInfo(response: Response): SubmitMemberInfoResultDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SubmitMemberInfoResultDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SubmitMemberInfoResultDto.fromJS(resultData200) : new SubmitMemberInfoResultDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    paymentAuthorize(input: PaymentAuthorizeRequestDto): Observable<PaymentAuthorizeResponseDto> {
        let url_ = this.baseUrl + "/api/services/CreditReport/Member/PaymentAuthorize";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processPaymentAuthorize(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processPaymentAuthorize(response));
                } catch (e) {
                    return <Observable<PaymentAuthorizeResponseDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentAuthorizeResponseDto>><any>Observable.throw(response);
        });
    }

    protected processPaymentAuthorize(response: Response): PaymentAuthorizeResponseDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PaymentAuthorizeResponseDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentAuthorizeResponseDto.fromJS(resultData200) : new PaymentAuthorizeResponseDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    registerMember(input: RegisterMemberRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/services/CreditReport/Member/RegisterMember";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRegisterMember(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegisterMember(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRegisterMember(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getCountryStates(countryCode: string): Observable<CountryStateDto[]> {
        let url_ = this.baseUrl + "/api/services/CreditReport/Member/GetCountryStates?";
        if (countryCode !== undefined)
        
            url_ += "countryCode=" + encodeURIComponent("" + countryCode) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCountryStates(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCountryStates(response));
                } catch (e) {
                    return <Observable<CountryStateDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CountryStateDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetCountryStates(response: Response): CountryStateDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CountryStateDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CountryStateDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getUserNotifications(state: State, maxResultCount: number, skipCount: number): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Notification/GetUserNotifications?";
        if (state !== undefined)
        
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserNotifications(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserNotifications(response));
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserNotifications(response: Response): GetNotificationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetNotificationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Notification/SetAllNotificationsAsRead";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetAllNotificationsAsRead(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetAllNotificationsAsRead(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetAllNotificationsAsRead(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Notification/SetNotificationAsRead";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetNotificationAsRead(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetNotificationAsRead(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetNotificationAsRead(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Notification/GetNotificationSettings";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetNotificationSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetNotificationSettings(response));
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetNotificationSettings(response: Response): GetNotificationSettingsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetNotificationSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Notification/UpdateNotificationSettings";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateNotificationSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateNotificationSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateNotificationSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/GetOrganizationUnits";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetOrganizationUnits(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrganizationUnits(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processGetOrganizationUnits(response: Response): ListResultDtoOfOrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfOrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getOrganizationUnitUsers(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetOrganizationUnitUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrganizationUnitUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(response);
        });
    }

    protected processGetOrganizationUnitUsers(response: Response): PagedResultDtoOfOrganizationUnitUserListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfOrganizationUnitUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/CreateOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrganizationUnit(response));
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processCreateOrganizationUnit(response: Response): OrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/UpdateOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateOrganizationUnit(response));
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): OrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/MoveOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processMoveOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMoveOrganizationUnit(response));
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response);
        });
    }

    protected processMoveOrganizationUnit(response: Response): OrganizationUnitDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/DeleteOrganizationUnit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    addUserToOrganizationUnit(input: UserToOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/AddUserToOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAddUserToOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddUserToOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAddUserToOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId !== undefined)
        
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (organizationUnitId !== undefined)
        
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRemoveUserFromOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRemoveUserFromOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    isInOrganizationUnit(input: UserToOrganizationUnitInput): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/Platform/OrganizationUnit/IsInOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processIsInOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsInOrganizationUnit(response));
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response);
        });
    }

    protected processIsInOrganizationUnit(response: Response): boolean {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: boolean = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class PackageServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAll(): Observable<ListResultDtoOfPackageDto> {
        let url_ = this.baseUrl + "/api/services/CreditReport/Package/GetAll";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAll(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAll(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfPackageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPackageDto>><any>Observable.throw(response);
        });
    }

    protected processGetAll(response: Response): ListResultDtoOfPackageDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfPackageDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPackageDto.fromJS(resultData200) : new ListResultDtoOfPackageDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Permission/GetAllPermissions";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAllPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllPermissions(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllPermissions(response: Response): ListResultDtoOfFlatPermissionWithLevelDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfFlatPermissionWithLevelDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/GetCurrentUserProfileForEdit";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCurrentUserProfileForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentUserProfileForEdit(response));
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: Response): CurrentUserProfileEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CurrentUserProfileEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/UpdateCurrentUserProfile";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateCurrentUserProfile(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateCurrentUserProfile(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateCurrentUserProfile(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/ChangePassword";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangePassword(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangePassword(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangePassword(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/UpdateProfilePicture";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateProfilePicture(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateProfilePicture(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateProfilePicture(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/GetPasswordComplexitySetting";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetPasswordComplexitySetting(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPasswordComplexitySetting(response));
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(response);
        });
    }

    protected processGetPasswordComplexitySetting(response: Response): GetPasswordComplexitySettingOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetPasswordComplexitySettingOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/GetProfilePicture";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetProfilePicture(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProfilePicture(response));
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response);
        });
    }

    protected processGetProfilePicture(response: Response): GetProfilePictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: string, userId: number, tenantId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/GetFriendProfilePictureById?";
        if (profilePictureId !== undefined)
        
            url_ += "ProfilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        
        if (userId !== undefined)
        
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (tenantId !== undefined)
        
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetFriendProfilePictureById(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetFriendProfilePictureById(response));
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response);
        });
    }

    protected processGetFriendProfilePictureById(response: Response): GetProfilePictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getProfilePictureById(profilePictureId: string): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/GetProfilePictureById?";
        if (profilePictureId !== undefined)
        
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetProfilePictureById(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetProfilePictureById(response));
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response);
        });
    }

    protected processGetProfilePictureById(response: Response): GetProfilePictureOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Profile/ChangeLanguage";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangeLanguage(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangeLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangeLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getRoles(permission: string): Observable<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Role/GetRoles?";
        if (permission !== undefined)
        
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRoles(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoles(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(response);
        });
    }

    protected processGetRoles(response: Response): ListResultDtoOfRoleListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfRoleListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRoleListDto.fromJS(resultData200) : new ListResultDtoOfRoleListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRoleForEdit(id: number): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Role/GetRoleForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRoleForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoleForEdit(response));
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetRoleForEdit(response: Response): GetRoleForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetRoleForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Role/CreateOrUpdateRole";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateOrUpdateRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteRole(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Role/DeleteRole?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Session/GetCurrentLoginInformations";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCurrentLoginInformations(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentLoginInformations(response));
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): GetCurrentLoginInformationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getTenants(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/GetTenants?";
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenants(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenants(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(response);
        });
    }

    protected processGetTenants(response: Response): PagedResultDtoOfTenantListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfTenantListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/CreateTenant";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTenantForEdit(id: number): Observable<TenantEditDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/GetTenantForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenantForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantForEdit(response));
                } catch (e) {
                    return <Observable<TenantEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetTenantForEdit(response: Response): TenantEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantEditDto.fromJS(resultData200) : new TenantEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateTenant(input: TenantEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/UpdateTenant";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteTenant(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/DeleteTenant?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTenantFeaturesForEdit(id: number): Observable<GetTenantFeaturesForEditOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenantFeaturesForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantFeaturesForEdit(response));
                } catch (e) {
                    return <Observable<GetTenantFeaturesForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantFeaturesForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetTenantFeaturesForEdit(response: Response): GetTenantFeaturesForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetTenantFeaturesForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesForEditOutput.fromJS(resultData200) : new GetTenantFeaturesForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/UpdateTenantFeatures";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateTenantFeatures(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateTenantFeatures(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateTenantFeatures(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/ResetTenantSpecificFeatures";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetTenantSpecificFeatures(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetTenantSpecificFeatures(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetTenantSpecificFeatures(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/Tenant/UnlockTenantAdmin";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnlockTenantAdmin(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlockTenantAdmin(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlockTenantAdmin(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantDashboard/GetMemberActivity";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetMemberActivity(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetMemberActivity(response));
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>Observable.throw(response);
        });
    }

    protected processGetMemberActivity(response: Response): GetMemberActivityOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetMemberActivityOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantHostsServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getTenantApiHost(clientHostName: string): Observable<TenantApiHostOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantHosts/GetTenantApiHost?";
        if (clientHostName !== undefined)
        
            url_ += "ClientHostName=" + encodeURIComponent("" + clientHostName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenantApiHost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantApiHost(response));
                } catch (e) {
                    return <Observable<TenantApiHostOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantApiHostOutput>><any>Observable.throw(response);
        });
    }

    protected processGetTenantApiHost(response: Response): TenantApiHostOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantApiHostOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantApiHostOutput.fromJS(resultData200) : new TenantApiHostOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    registerTenant(input: RegisterTenantInput): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantRegistration/RegisterTenant";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRegisterTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegisterTenant(response));
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>Observable.throw(response);
        });
    }

    protected processRegisterTenant(response: Response): RegisterTenantOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterTenantOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantSettings/GetAllSettings";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAllSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAllSettings(response));
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>Observable.throw(response);
        });
    }

    protected processGetAllSettings(response: Response): TenantSettingsEditDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantSettings/UpdateAllSettings";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateAllSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateAllSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateAllSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantSettings/ClearLogo";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processClearLogo(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearLogo(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearLogo(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    clearCustomCss(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantSettings/ClearCustomCss";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processClearCustomCss(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processClearCustomCss(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processClearCustomCss(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/TenantSettings/SendTestEmail";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSendTestEmail(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendTestEmail(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendTestEmail(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantSettingsCreditReportServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getIdcsSettings(): Observable<IdcsSettingsDto> {
        let url_ = this.baseUrl + "/api/services/CreditReport/TenantSettingsCreditReport/GetIdcsSettings";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetIdcsSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetIdcsSettings(response));
                } catch (e) {
                    return <Observable<IdcsSettingsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<IdcsSettingsDto>><any>Observable.throw(response);
        });
    }

    protected processGetIdcsSettings(response: Response): IdcsSettingsDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IdcsSettingsDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IdcsSettingsDto.fromJS(resultData200) : new IdcsSettingsDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateIdcsSettings(input: IdcsSettingsDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/CreditReport/TenantSettingsCreditReport/UpdateIdcsSettings";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateIdcsSettings(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateIdcsSettings(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateIdcsSettings(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Timing/GetTimezones?";
        if (defaultTimezoneScope !== undefined)
        
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTimezones(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTimezones(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(response);
        });
    }

    protected processGetTimezones(response: Response): ListResultDtoOfNameValueDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/Platform/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
        
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTimezoneComboboxItems(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTimezoneComboboxItems(response));
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response);
        });
    }

    protected processGetTimezoneComboboxItems(response: Response): ComboboxItemDto[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAuthenticate(response));
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processAuthenticate(response: Response): AuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSendTwoFactorAuthCode(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSendTwoFactorAuthCode(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSendTwoFactorAuthCode(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
        
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processImpersonatedAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processImpersonatedAuthenticate(response));
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processImpersonatedAuthenticate(response: Response): ImpersonatedAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ImpersonatedAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
        
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLinkedAccountAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLinkedAccountAuthenticate(response));
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processLinkedAccountAuthenticate(response: Response): SwitchedAccountAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: SwitchedAccountAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetExternalAuthenticationProviders(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalAuthenticationProviders(response));
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): ExternalLoginProviderInfoModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processExternalAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processExternalAuthenticate(response: Response): ExternalAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    testNotification(message: string, severity: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
        
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        
        if (severity !== undefined)
        
            url_ += "severity=" + encodeURIComponent("" + severity) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processTestNotification(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processTestNotification(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processTestNotification(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getUsers(filter: string, permission: string, role: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/Platform/User/GetUsers?";
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (permission !== undefined)
        
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        
        if (role !== undefined)
        
            url_ += "Role=" + encodeURIComponent("" + role) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response);
        });
    }

    protected processGetUsers(response: Response): PagedResultDtoOfUserListDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/Platform/User/GetUsersToExcel";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUsersToExcel(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsersToExcel(response));
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response);
        });
    }

    protected processGetUsersToExcel(response: Response): FileDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/User/GetUserForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserForEdit(response));
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserForEdit(response: Response): GetUserForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetUserForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserPermissionsForEdit(id: number): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserPermissionsForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserPermissionsForEdit(response));
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserPermissionsForEdit(response: Response): GetUserPermissionsForEditOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetUserPermissionsForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/User/ResetUserSpecificPermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetUserSpecificPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetUserSpecificPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/User/UpdateUserPermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateUserPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/User/CreateOrUpdateUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateOrUpdateUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrUpdateUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrUpdateUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteUser(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/User/DeleteUser?";
        if (id !== undefined)
        
            url_ += "Id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/User/UnlockUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnlockUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    linkToUser(input: LinkToUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/UserLink/LinkToUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLinkToUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLinkToUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processLinkToUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLinkedUsers(maxResultCount: number, skipCount: number, sorting: string): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/Platform/UserLink/GetLinkedUsers?";
        if (maxResultCount !== undefined)
        
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (skipCount !== undefined)
        
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (sorting !== undefined)
        
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLinkedUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLinkedUsers(response));
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(response);
        });
    }

    protected processGetLinkedUsers(response: Response): PagedResultDtoOfLinkedUserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: PagedResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/Platform/UserLink/GetRecentlyUsedLinkedUsers";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRecentlyUsedLinkedUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRecentlyUsedLinkedUsers(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(response);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: Response): ListResultDtoOfLinkedUserDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/Platform/UserLink/UnlinkUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnlinkUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlinkUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlinkUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/Platform/UserLogin/GetRecentUserLoginAttempts";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRecentUserLoginAttempts(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRecentUserLoginAttempts(response));
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(response);
        });
    }

    protected processGetRecentUserLoginAttempts(response: Response): ListResultDtoOfUserLoginAttemptDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ListResultDtoOfUserLoginAttemptDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class ValidationServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    isEmailValidToRegister(email: string): Observable<EmailValidationDto> {
        let url_ = this.baseUrl + "/api/services/Platform/Validation/IsEmailValidToRegister?";
        if (email !== undefined)
        
            url_ += "email=" + encodeURIComponent("" + email) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processIsEmailValidToRegister(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsEmailValidToRegister(response));
                } catch (e) {
                    return <Observable<EmailValidationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<EmailValidationDto>><any>Observable.throw(response);
        });
    }

    protected processIsEmailValidToRegister(response: Response): EmailValidationDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: EmailValidationDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EmailValidationDto.fromJS(resultData200) : new EmailValidationDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/Platform/WebLog/GetLatestWebLogs";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLatestWebLogs(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLatestWebLogs(response));
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLatestWebLogs(response: Response): GetLatestWebLogsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetLatestWebLogsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/Platform/WebLog/DownloadWebLogs";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDownloadWebLogs(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDownloadWebLogs(response));
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response);
        });
    }

    protected processDownloadWebLogs(response: Response): FileDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export class IsTenantAvailableInput { 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        return new IsTenantAvailableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableInput(JSON.parse(json));
    }
}

export class IsTenantAvailableOutput { 
    state: IsTenantAvailableOutputState; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.state = data["state"] !== undefined ? data["state"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        return new IsTenantAvailableOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["state"] = this.state !== undefined ? this.state : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableOutput(JSON.parse(json));
    }
}

export class RegisterInput { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    password: string; 
    captchaResponse: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : null;
        }
    }

    static fromJS(data: any): RegisterInput {
        return new RegisterInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterInput(JSON.parse(json));
    }
}

export class RegisterOutput { 
    canLogin: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : null;
        }
    }

    static fromJS(data: any): RegisterOutput {
        return new RegisterOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterOutput(JSON.parse(json));
    }
}

export class SendPasswordResetCodeInput { 
    emailAddress: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        return new SendPasswordResetCodeInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendPasswordResetCodeInput(JSON.parse(json));
    }
}

export class ResetPasswordInput { 
    userId: number; 
    resetCode: string; 
    password: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.resetCode = data["resetCode"] !== undefined ? data["resetCode"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        return new ResetPasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["resetCode"] = this.resetCode !== undefined ? this.resetCode : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResetPasswordInput(JSON.parse(json));
    }
}

export class ResetPasswordOutput { 
    canLogin: boolean; 
    userName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        return new ResetPasswordOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ResetPasswordOutput(JSON.parse(json));
    }
}

export class SendEmailActivationLinkInput { 
    emailAddress: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        return new SendEmailActivationLinkInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendEmailActivationLinkInput(JSON.parse(json));
    }
}

export class ActivateEmailInput { 
    userId: number; 
    confirmationCode: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.confirmationCode = data["confirmationCode"] !== undefined ? data["confirmationCode"] : null;
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        return new ActivateEmailInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["confirmationCode"] = this.confirmationCode !== undefined ? this.confirmationCode : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ActivateEmailInput(JSON.parse(json));
    }
}

export class ImpersonateInput { 
    tenantId: number; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): ImpersonateInput {
        return new ImpersonateInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImpersonateInput(JSON.parse(json));
    }
}

export class ImpersonateOutput { 
    impersonationToken: string; 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.impersonationToken = data["impersonationToken"] !== undefined ? data["impersonationToken"] : null;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        return new ImpersonateOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["impersonationToken"] = this.impersonationToken !== undefined ? this.impersonationToken : null;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImpersonateOutput(JSON.parse(json));
    }
}

export class SwitchToLinkedAccountInput { 
    targetTenantId: number; 
    targetUserId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.targetTenantId = data["targetTenantId"] !== undefined ? data["targetTenantId"] : null;
            this.targetUserId = data["targetUserId"] !== undefined ? data["targetUserId"] : null;
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        return new SwitchToLinkedAccountInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["targetTenantId"] = this.targetTenantId !== undefined ? this.targetTenantId : null;
        data["targetUserId"] = this.targetUserId !== undefined ? this.targetUserId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SwitchToLinkedAccountInput(JSON.parse(json));
    }
}

export class SwitchToLinkedAccountOutput { 
    switchAccountToken: string; 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.switchAccountToken = data["switchAccountToken"] !== undefined ? data["switchAccountToken"] : null;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        return new SwitchToLinkedAccountOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["switchAccountToken"] = this.switchAccountToken !== undefined ? this.switchAccountToken : null;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SwitchToLinkedAccountOutput(JSON.parse(json));
    }
}

export class PagedResultDtoOfAuditLogListDto { 
    totalCount: number; 
    items: AuditLogListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        return new PagedResultDtoOfAuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfAuditLogListDto(JSON.parse(json));
    }
}

export class AuditLogListDto { 
    userId: number; 
    userName: string; 
    impersonatorTenantId: number; 
    impersonatorUserId: number; 
    serviceName: string; 
    methodName: string; 
    parameters: string; 
    executionTime: moment.Moment; 
    executionDuration: number; 
    clientIpAddress: string; 
    clientName: string; 
    browserInfo: string; 
    exception: string; 
    customData: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.impersonatorTenantId = data["impersonatorTenantId"] !== undefined ? data["impersonatorTenantId"] : null;
            this.impersonatorUserId = data["impersonatorUserId"] !== undefined ? data["impersonatorUserId"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.parameters = data["parameters"] !== undefined ? data["parameters"] : null;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.exception = data["exception"] !== undefined ? data["exception"] : null;
            this.customData = data["customData"] !== undefined ? data["customData"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogListDto {
        return new AuditLogListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["impersonatorTenantId"] = this.impersonatorTenantId !== undefined ? this.impersonatorTenantId : null;
        data["impersonatorUserId"] = this.impersonatorUserId !== undefined ? this.impersonatorUserId : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["parameters"] = this.parameters !== undefined ? this.parameters : null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["exception"] = this.exception !== undefined ? this.exception : null;
        data["customData"] = this.customData !== undefined ? this.customData : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogListDto(JSON.parse(json));
    }
}

export class FileDto { 
    fileName: string; 
    fileType: string; 
    fileToken: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.fileName = data["fileName"] !== undefined ? data["fileName"] : null;
            this.fileType = data["fileType"] !== undefined ? data["fileType"] : null;
            this.fileToken = data["fileToken"] !== undefined ? data["fileToken"] : null;
        }
    }

    static fromJS(data: any): FileDto {
        return new FileDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["fileName"] = this.fileName !== undefined ? this.fileName : null;
        data["fileType"] = this.fileType !== undefined ? this.fileType : null;
        data["fileToken"] = this.fileToken !== undefined ? this.fileToken : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FileDto(JSON.parse(json));
    }
}

export class ListResultDtoOfCacheDto { 
    items: CacheDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        return new ListResultDtoOfCacheDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfCacheDto(JSON.parse(json));
    }
}

export class CacheDto { 
    name: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
        }
    }

    static fromJS(data: any): CacheDto {
        return new CacheDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CacheDto(JSON.parse(json));
    }
}

export class EntityDtoOfString { 
    id: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        return new EntityDtoOfString(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDtoOfString(JSON.parse(json));
    }
}

export class GetUserChatFriendsWithSettingsOutput { 
    serverTime: moment.Moment; 
    friends: FriendDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.serverTime = data["serverTime"] ? moment(data["serverTime"].toString()) : null;
            if (data["friends"] && data["friends"].constructor === Array) {
                this.friends = [];
                for (let item of data["friends"])
                    this.friends.push(FriendDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        return new GetUserChatFriendsWithSettingsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : null;
        if (this.friends && this.friends.constructor === Array) {
            data["friends"] = [];
            for (let item of this.friends)
                data["friends"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUserChatFriendsWithSettingsOutput(JSON.parse(json));
    }
}

export class FriendDto { 
    friendUserId: number; 
    friendTenantId: number; 
    friendUserName: string; 
    friendTenancyName: string; 
    friendProfilePictureId: string; 
    unreadMessageCount: number; 
    isOnline: boolean; 
    state: FriendDtoState;
    constructor(data?: any) {
        if (data !== undefined) {
            this.friendUserId = data["friendUserId"] !== undefined ? data["friendUserId"] : null;
            this.friendTenantId = data["friendTenantId"] !== undefined ? data["friendTenantId"] : null;
            this.friendUserName = data["friendUserName"] !== undefined ? data["friendUserName"] : null;
            this.friendTenancyName = data["friendTenancyName"] !== undefined ? data["friendTenancyName"] : null;
            this.friendProfilePictureId = data["friendProfilePictureId"] !== undefined ? data["friendProfilePictureId"] : null;
            this.unreadMessageCount = data["unreadMessageCount"] !== undefined ? data["unreadMessageCount"] : null;
            this.isOnline = data["isOnline"] !== undefined ? data["isOnline"] : null;
            this.state = data["state"] !== undefined ? data["state"] : null;
        }
    }

    static fromJS(data: any): FriendDto {
        return new FriendDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["friendUserId"] = this.friendUserId !== undefined ? this.friendUserId : null;
        data["friendTenantId"] = this.friendTenantId !== undefined ? this.friendTenantId : null;
        data["friendUserName"] = this.friendUserName !== undefined ? this.friendUserName : null;
        data["friendTenancyName"] = this.friendTenancyName !== undefined ? this.friendTenancyName : null;
        data["friendProfilePictureId"] = this.friendProfilePictureId !== undefined ? this.friendProfilePictureId : null;
        data["unreadMessageCount"] = this.unreadMessageCount !== undefined ? this.unreadMessageCount : null;
        data["isOnline"] = this.isOnline !== undefined ? this.isOnline : null;
        data["state"] = this.state !== undefined ? this.state : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FriendDto(JSON.parse(json));
    }
}

export class ListResultDtoOfChatMessageDto { 
    items: ChatMessageDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ChatMessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        return new ListResultDtoOfChatMessageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfChatMessageDto(JSON.parse(json));
    }
}

export class ChatMessageDto { 
    userId: number; 
    tenantId: number; 
    targetUserId: number; 
    targetTenantId: number; 
    side: ChatMessageDtoSide; 
    readState: ChatMessageDtoReadState; 
    message: string; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.targetUserId = data["targetUserId"] !== undefined ? data["targetUserId"] : null;
            this.targetTenantId = data["targetTenantId"] !== undefined ? data["targetTenantId"] : null;
            this.side = data["side"] !== undefined ? data["side"] : null;
            this.readState = data["readState"] !== undefined ? data["readState"] : null;
            this.message = data["message"] !== undefined ? data["message"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): ChatMessageDto {
        return new ChatMessageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["targetUserId"] = this.targetUserId !== undefined ? this.targetUserId : null;
        data["targetTenantId"] = this.targetTenantId !== undefined ? this.targetTenantId : null;
        data["side"] = this.side !== undefined ? this.side : null;
        data["readState"] = this.readState !== undefined ? this.readState : null;
        data["message"] = this.message !== undefined ? this.message : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChatMessageDto(JSON.parse(json));
    }
}

export class MarkAllUnreadMessagesOfUserAsReadInput { 
    tenantId: number; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        return new MarkAllUnreadMessagesOfUserAsReadInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MarkAllUnreadMessagesOfUserAsReadInput(JSON.parse(json));
    }
}

export class ListResultDtoOfComboboxItemDto { 
    items: ComboboxItemDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfComboboxItemDto {
        return new ListResultDtoOfComboboxItemDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfComboboxItemDto(JSON.parse(json));
    }
}

export class ComboboxItemDto { 
    value: string; 
    displayText: string; 
    isSelected: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.value = data["value"] !== undefined ? data["value"] : null;
            this.displayText = data["displayText"] !== undefined ? data["displayText"] : null;
            this.isSelected = data["isSelected"] !== undefined ? data["isSelected"] : null;
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        return new ComboboxItemDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["value"] = this.value !== undefined ? this.value : null;
        data["displayText"] = this.displayText !== undefined ? this.displayText : null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ComboboxItemDto(JSON.parse(json));
    }
}

export class FindUsersInput { 
    tenantId: number; 
    maxResultCount: number; 
    skipCount: number; 
    filter: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.maxResultCount = data["maxResultCount"] !== undefined ? data["maxResultCount"] : null;
            this.skipCount = data["skipCount"] !== undefined ? data["skipCount"] : null;
            this.filter = data["filter"] !== undefined ? data["filter"] : null;
        }
    }

    static fromJS(data: any): FindUsersInput {
        return new FindUsersInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : null;
        data["filter"] = this.filter !== undefined ? this.filter : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FindUsersInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfNameValueDto { 
    totalCount: number; 
    items: NameValueDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        return new PagedResultDtoOfNameValueDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfNameValueDto(JSON.parse(json));
    }
}

export class NameValueDto { 
    name: string; 
    value: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.value = data["value"] !== undefined ? data["value"] : null;
        }
    }

    static fromJS(data: any): NameValueDto {
        return new NameValueDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["value"] = this.value !== undefined ? this.value : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NameValueDto(JSON.parse(json));
    }
}

export class GetDefaultEditionNameOutput { 
    name: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        return new GetDefaultEditionNameOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetDefaultEditionNameOutput(JSON.parse(json));
    }
}

export class CreditReportOutput { 
    kbaPassed: boolean; 
    creditReport: CreditReportDto; 
    updatable: boolean; 
    isSubscriptionCancelled: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.kbaPassed = data["kbaPassed"] !== undefined ? data["kbaPassed"] : null;
            this.creditReport = data["creditReport"] ? CreditReportDto.fromJS(data["creditReport"]) : null;
            this.updatable = data["updatable"] !== undefined ? data["updatable"] : null;
            this.isSubscriptionCancelled = data["isSubscriptionCancelled"] !== undefined ? data["isSubscriptionCancelled"] : null;
        }
    }

    static fromJS(data: any): CreditReportOutput {
        return new CreditReportOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["kbaPassed"] = this.kbaPassed !== undefined ? this.kbaPassed : null;
        data["creditReport"] = this.creditReport ? this.creditReport.toJS() : null;
        data["updatable"] = this.updatable !== undefined ? this.updatable : null;
        data["isSubscriptionCancelled"] = this.isSubscriptionCancelled !== undefined ? this.isSubscriptionCancelled : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditReportOutput(JSON.parse(json));
    }
}

export class CreditReportDto { 
    creditReportId: number; 
    bureauReports: CreditBureauReportDto[]; 
    accounts: AccountDto[]; 
    alerts: AlertDto[]; 
    recommendations: RecommendationDto[]; 
    creditorContacts: CreditorContactDto[]; 
    consumerStatements: ConsumerStatementDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.creditReportId = data["creditReportId"] !== undefined ? data["creditReportId"] : null;
            if (data["bureauReports"] && data["bureauReports"].constructor === Array) {
                this.bureauReports = [];
                for (let item of data["bureauReports"])
                    this.bureauReports.push(CreditBureauReportDto.fromJS(item));
            }
            if (data["accounts"] && data["accounts"].constructor === Array) {
                this.accounts = [];
                for (let item of data["accounts"])
                    this.accounts.push(AccountDto.fromJS(item));
            }
            if (data["alerts"] && data["alerts"].constructor === Array) {
                this.alerts = [];
                for (let item of data["alerts"])
                    this.alerts.push(AlertDto.fromJS(item));
            }
            if (data["recommendations"] && data["recommendations"].constructor === Array) {
                this.recommendations = [];
                for (let item of data["recommendations"])
                    this.recommendations.push(RecommendationDto.fromJS(item));
            }
            if (data["creditorContacts"] && data["creditorContacts"].constructor === Array) {
                this.creditorContacts = [];
                for (let item of data["creditorContacts"])
                    this.creditorContacts.push(CreditorContactDto.fromJS(item));
            }
            if (data["consumerStatements"] && data["consumerStatements"].constructor === Array) {
                this.consumerStatements = [];
                for (let item of data["consumerStatements"])
                    this.consumerStatements.push(ConsumerStatementDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreditReportDto {
        return new CreditReportDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["creditReportId"] = this.creditReportId !== undefined ? this.creditReportId : null;
        if (this.bureauReports && this.bureauReports.constructor === Array) {
            data["bureauReports"] = [];
            for (let item of this.bureauReports)
                data["bureauReports"].push(item.toJS());
        }
        if (this.accounts && this.accounts.constructor === Array) {
            data["accounts"] = [];
            for (let item of this.accounts)
                data["accounts"].push(item.toJS());
        }
        if (this.alerts && this.alerts.constructor === Array) {
            data["alerts"] = [];
            for (let item of this.alerts)
                data["alerts"].push(item.toJS());
        }
        if (this.recommendations && this.recommendations.constructor === Array) {
            data["recommendations"] = [];
            for (let item of this.recommendations)
                data["recommendations"].push(item.toJS());
        }
        if (this.creditorContacts && this.creditorContacts.constructor === Array) {
            data["creditorContacts"] = [];
            for (let item of this.creditorContacts)
                data["creditorContacts"].push(item.toJS());
        }
        if (this.consumerStatements && this.consumerStatements.constructor === Array) {
            data["consumerStatements"] = [];
            for (let item of this.consumerStatements)
                data["consumerStatements"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditReportDto(JSON.parse(json));
    }
}

export class CreditBureauReportDto { 
    bureau: string; 
    creditScore: CreditScoreDto; 
    creditSummary: CreditSummaryDto; 
    personalInfo: PersonalInfoDto; 
    inquiries: InquiryDto[]; 
    scoreFactors: ScoreFactorDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.bureau = data["bureau"] !== undefined ? data["bureau"] : null;
            this.creditScore = data["creditScore"] ? CreditScoreDto.fromJS(data["creditScore"]) : null;
            this.creditSummary = data["creditSummary"] ? CreditSummaryDto.fromJS(data["creditSummary"]) : null;
            this.personalInfo = data["personalInfo"] ? PersonalInfoDto.fromJS(data["personalInfo"]) : null;
            if (data["inquiries"] && data["inquiries"].constructor === Array) {
                this.inquiries = [];
                for (let item of data["inquiries"])
                    this.inquiries.push(InquiryDto.fromJS(item));
            }
            if (data["scoreFactors"] && data["scoreFactors"].constructor === Array) {
                this.scoreFactors = [];
                for (let item of data["scoreFactors"])
                    this.scoreFactors.push(ScoreFactorDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreditBureauReportDto {
        return new CreditBureauReportDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bureau"] = this.bureau !== undefined ? this.bureau : null;
        data["creditScore"] = this.creditScore ? this.creditScore.toJS() : null;
        data["creditSummary"] = this.creditSummary ? this.creditSummary.toJS() : null;
        data["personalInfo"] = this.personalInfo ? this.personalInfo.toJS() : null;
        if (this.inquiries && this.inquiries.constructor === Array) {
            data["inquiries"] = [];
            for (let item of this.inquiries)
                data["inquiries"].push(item.toJS());
        }
        if (this.scoreFactors && this.scoreFactors.constructor === Array) {
            data["scoreFactors"] = [];
            for (let item of this.scoreFactors)
                data["scoreFactors"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditBureauReportDto(JSON.parse(json));
    }
}

export class AccountDto { 
    accountIds: number[]; 
    accountName: string; 
    state: AccountDtoState; 
    creditLimit: number; 
    availableCredit: number; 
    outstandingBalance: number; 
    ratio: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["accountIds"] && data["accountIds"].constructor === Array) {
                this.accountIds = [];
                for (let item of data["accountIds"])
                    this.accountIds.push(item);
            }
            this.accountName = data["accountName"] !== undefined ? data["accountName"] : null;
            this.state = data["state"] !== undefined ? data["state"] : null;
            this.creditLimit = data["creditLimit"] !== undefined ? data["creditLimit"] : null;
            this.availableCredit = data["availableCredit"] !== undefined ? data["availableCredit"] : null;
            this.outstandingBalance = data["outstandingBalance"] !== undefined ? data["outstandingBalance"] : null;
            this.ratio = data["ratio"] !== undefined ? data["ratio"] : null;
        }
    }

    static fromJS(data: any): AccountDto {
        return new AccountDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.accountIds && this.accountIds.constructor === Array) {
            data["accountIds"] = [];
            for (let item of this.accountIds)
                data["accountIds"].push(item);
        }
        data["accountName"] = this.accountName !== undefined ? this.accountName : null;
        data["state"] = this.state !== undefined ? this.state : null;
        data["creditLimit"] = this.creditLimit !== undefined ? this.creditLimit : null;
        data["availableCredit"] = this.availableCredit !== undefined ? this.availableCredit : null;
        data["outstandingBalance"] = this.outstandingBalance !== undefined ? this.outstandingBalance : null;
        data["ratio"] = this.ratio !== undefined ? this.ratio : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AccountDto(JSON.parse(json));
    }
}

export class AlertDto { 
    type: AlertDtoType; 
    bureau: string; 
    date: moment.Moment; 
    text: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.type = data["type"] !== undefined ? data["type"] : null;
            this.bureau = data["bureau"] !== undefined ? data["bureau"] : null;
            this.date = data["date"] ? moment(data["date"].toString()) : null;
            this.text = data["text"] !== undefined ? data["text"] : null;
        }
    }

    static fromJS(data: any): AlertDto {
        return new AlertDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["type"] = this.type !== undefined ? this.type : null;
        data["bureau"] = this.bureau !== undefined ? this.bureau : null;
        data["date"] = this.date ? this.date.toISOString() : null;
        data["text"] = this.text !== undefined ? this.text : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AlertDto(JSON.parse(json));
    }
}

export class RecommendationDto { 
    header: string; 
    text: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.header = data["header"] !== undefined ? data["header"] : null;
            this.text = data["text"] !== undefined ? data["text"] : null;
        }
    }

    static fromJS(data: any): RecommendationDto {
        return new RecommendationDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["header"] = this.header !== undefined ? this.header : null;
        data["text"] = this.text !== undefined ? this.text : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RecommendationDto(JSON.parse(json));
    }
}

export class CreditorContactDto { 
    name: string; 
    address: AddressDto; 
    phoneNumber: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.address = data["address"] ? AddressDto.fromJS(data["address"]) : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
        }
    }

    static fromJS(data: any): CreditorContactDto {
        return new CreditorContactDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["address"] = this.address ? this.address.toJS() : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditorContactDto(JSON.parse(json));
    }
}

export class ConsumerStatementDto { 
    bureau: string; 
    date: moment.Moment; 
    statement: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.bureau = data["bureau"] !== undefined ? data["bureau"] : null;
            this.date = data["date"] ? moment(data["date"].toString()) : null;
            this.statement = data["statement"] !== undefined ? data["statement"] : null;
        }
    }

    static fromJS(data: any): ConsumerStatementDto {
        return new ConsumerStatementDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bureau"] = this.bureau !== undefined ? this.bureau : null;
        data["date"] = this.date ? this.date.toISOString() : null;
        data["statement"] = this.statement !== undefined ? this.statement : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ConsumerStatementDto(JSON.parse(json));
    }
}

export class CreditScoreDto { 
    score: number; 
    populationRank: number; 
    qualitativeRank: number; 
    scoreDate: moment.Moment; 
    nextUpdate: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.score = data["score"] !== undefined ? data["score"] : null;
            this.populationRank = data["populationRank"] !== undefined ? data["populationRank"] : null;
            this.qualitativeRank = data["qualitativeRank"] !== undefined ? data["qualitativeRank"] : null;
            this.scoreDate = data["scoreDate"] ? moment(data["scoreDate"].toString()) : null;
            this.nextUpdate = data["nextUpdate"] !== undefined ? data["nextUpdate"] : null;
        }
    }

    static fromJS(data: any): CreditScoreDto {
        return new CreditScoreDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["score"] = this.score !== undefined ? this.score : null;
        data["populationRank"] = this.populationRank !== undefined ? this.populationRank : null;
        data["qualitativeRank"] = this.qualitativeRank !== undefined ? this.qualitativeRank : null;
        data["scoreDate"] = this.scoreDate ? this.scoreDate.toISOString() : null;
        data["nextUpdate"] = this.nextUpdate !== undefined ? this.nextUpdate : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditScoreDto(JSON.parse(json));
    }
}

export class CreditSummaryDto { 
    totalAccounts: number; 
    openAccounts: number; 
    closedAccounts: number; 
    deliquent: number; 
    derogatory: number; 
    balances: number; 
    payments: number; 
    publicRecords: number; 
    inquiries2Years: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalAccounts = data["totalAccounts"] !== undefined ? data["totalAccounts"] : null;
            this.openAccounts = data["openAccounts"] !== undefined ? data["openAccounts"] : null;
            this.closedAccounts = data["closedAccounts"] !== undefined ? data["closedAccounts"] : null;
            this.deliquent = data["deliquent"] !== undefined ? data["deliquent"] : null;
            this.derogatory = data["derogatory"] !== undefined ? data["derogatory"] : null;
            this.balances = data["balances"] !== undefined ? data["balances"] : null;
            this.payments = data["payments"] !== undefined ? data["payments"] : null;
            this.publicRecords = data["publicRecords"] !== undefined ? data["publicRecords"] : null;
            this.inquiries2Years = data["inquiries2Years"] !== undefined ? data["inquiries2Years"] : null;
        }
    }

    static fromJS(data: any): CreditSummaryDto {
        return new CreditSummaryDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalAccounts"] = this.totalAccounts !== undefined ? this.totalAccounts : null;
        data["openAccounts"] = this.openAccounts !== undefined ? this.openAccounts : null;
        data["closedAccounts"] = this.closedAccounts !== undefined ? this.closedAccounts : null;
        data["deliquent"] = this.deliquent !== undefined ? this.deliquent : null;
        data["derogatory"] = this.derogatory !== undefined ? this.derogatory : null;
        data["balances"] = this.balances !== undefined ? this.balances : null;
        data["payments"] = this.payments !== undefined ? this.payments : null;
        data["publicRecords"] = this.publicRecords !== undefined ? this.publicRecords : null;
        data["inquiries2Years"] = this.inquiries2Years !== undefined ? this.inquiries2Years : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditSummaryDto(JSON.parse(json));
    }
}

export class PersonalInfoDto { 
    name: string; 
    doB: moment.Moment; 
    currentAddress: AddressDto; 
    previousAddresses: AddressDto[]; 
    employers: EmployerDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.doB = data["doB"] ? moment(data["doB"].toString()) : null;
            this.currentAddress = data["currentAddress"] ? AddressDto.fromJS(data["currentAddress"]) : null;
            if (data["previousAddresses"] && data["previousAddresses"].constructor === Array) {
                this.previousAddresses = [];
                for (let item of data["previousAddresses"])
                    this.previousAddresses.push(AddressDto.fromJS(item));
            }
            if (data["employers"] && data["employers"].constructor === Array) {
                this.employers = [];
                for (let item of data["employers"])
                    this.employers.push(EmployerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PersonalInfoDto {
        return new PersonalInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["doB"] = this.doB ? this.doB.toISOString() : null;
        data["currentAddress"] = this.currentAddress ? this.currentAddress.toJS() : null;
        if (this.previousAddresses && this.previousAddresses.constructor === Array) {
            data["previousAddresses"] = [];
            for (let item of this.previousAddresses)
                data["previousAddresses"].push(item.toJS());
        }
        if (this.employers && this.employers.constructor === Array) {
            data["employers"] = [];
            for (let item of this.employers)
                data["employers"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PersonalInfoDto(JSON.parse(json));
    }
}

export class InquiryDto { 
    creditorName: string; 
    industry: string; 
    dateOfInquiry: moment.Moment;
    constructor(data?: any) {
        if (data !== undefined) {
            this.creditorName = data["creditorName"] !== undefined ? data["creditorName"] : null;
            this.industry = data["industry"] !== undefined ? data["industry"] : null;
            this.dateOfInquiry = data["dateOfInquiry"] ? moment(data["dateOfInquiry"].toString()) : null;
        }
    }

    static fromJS(data: any): InquiryDto {
        return new InquiryDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["creditorName"] = this.creditorName !== undefined ? this.creditorName : null;
        data["industry"] = this.industry !== undefined ? this.industry : null;
        data["dateOfInquiry"] = this.dateOfInquiry ? this.dateOfInquiry.toISOString() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new InquiryDto(JSON.parse(json));
    }
}

export class ScoreFactorDto { 
    isPositive: boolean; 
    text: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isPositive = data["isPositive"] !== undefined ? data["isPositive"] : null;
            this.text = data["text"] !== undefined ? data["text"] : null;
        }
    }

    static fromJS(data: any): ScoreFactorDto {
        return new ScoreFactorDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isPositive"] = this.isPositive !== undefined ? this.isPositive : null;
        data["text"] = this.text !== undefined ? this.text : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ScoreFactorDto(JSON.parse(json));
    }
}

export class AddressDto { 
    line1: string; 
    line2: string; 
    line3: string; 
    line4: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.line1 = data["line1"] !== undefined ? data["line1"] : null;
            this.line2 = data["line2"] !== undefined ? data["line2"] : null;
            this.line3 = data["line3"] !== undefined ? data["line3"] : null;
            this.line4 = data["line4"] !== undefined ? data["line4"] : null;
        }
    }

    static fromJS(data: any): AddressDto {
        return new AddressDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["line1"] = this.line1 !== undefined ? this.line1 : null;
        data["line2"] = this.line2 !== undefined ? this.line2 : null;
        data["line3"] = this.line3 !== undefined ? this.line3 : null;
        data["line4"] = this.line4 !== undefined ? this.line4 : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AddressDto(JSON.parse(json));
    }
}

export class EmployerDto { 
    name: string; 
    date: moment.Moment;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.date = data["date"] ? moment(data["date"].toString()) : null;
        }
    }

    static fromJS(data: any): EmployerDto {
        return new EmployerDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["date"] = this.date ? this.date.toISOString() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EmployerDto(JSON.parse(json));
    }
}

export class AccountInfoDto { 
    bureau: string; 
    status: AccountInfoDtoStatus; 
    totalCreditLimit: number; 
    availableCredit: number; 
    creditUtilization: number; 
    accountName: string; 
    accountNumber: string; 
    balance: number; 
    pastDue: number; 
    dateOpened: moment.Moment; 
    moPayment: number; 
    paymentStatus: string; 
    terms: string; 
    comment: string; 
    maxAccountHistoryDate: moment.Moment; 
    twoYearHistory: AccountCreditHistoryDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.bureau = data["bureau"] !== undefined ? data["bureau"] : null;
            this.status = data["status"] !== undefined ? data["status"] : null;
            this.totalCreditLimit = data["totalCreditLimit"] !== undefined ? data["totalCreditLimit"] : null;
            this.availableCredit = data["availableCredit"] !== undefined ? data["availableCredit"] : null;
            this.creditUtilization = data["creditUtilization"] !== undefined ? data["creditUtilization"] : null;
            this.accountName = data["accountName"] !== undefined ? data["accountName"] : null;
            this.accountNumber = data["accountNumber"] !== undefined ? data["accountNumber"] : null;
            this.balance = data["balance"] !== undefined ? data["balance"] : null;
            this.pastDue = data["pastDue"] !== undefined ? data["pastDue"] : null;
            this.dateOpened = data["dateOpened"] ? moment(data["dateOpened"].toString()) : null;
            this.moPayment = data["moPayment"] !== undefined ? data["moPayment"] : null;
            this.paymentStatus = data["paymentStatus"] !== undefined ? data["paymentStatus"] : null;
            this.terms = data["terms"] !== undefined ? data["terms"] : null;
            this.comment = data["comment"] !== undefined ? data["comment"] : null;
            this.maxAccountHistoryDate = data["maxAccountHistoryDate"] ? moment(data["maxAccountHistoryDate"].toString()) : null;
            if (data["twoYearHistory"] && data["twoYearHistory"].constructor === Array) {
                this.twoYearHistory = [];
                for (let item of data["twoYearHistory"])
                    this.twoYearHistory.push(AccountCreditHistoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AccountInfoDto {
        return new AccountInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["bureau"] = this.bureau !== undefined ? this.bureau : null;
        data["status"] = this.status !== undefined ? this.status : null;
        data["totalCreditLimit"] = this.totalCreditLimit !== undefined ? this.totalCreditLimit : null;
        data["availableCredit"] = this.availableCredit !== undefined ? this.availableCredit : null;
        data["creditUtilization"] = this.creditUtilization !== undefined ? this.creditUtilization : null;
        data["accountName"] = this.accountName !== undefined ? this.accountName : null;
        data["accountNumber"] = this.accountNumber !== undefined ? this.accountNumber : null;
        data["balance"] = this.balance !== undefined ? this.balance : null;
        data["pastDue"] = this.pastDue !== undefined ? this.pastDue : null;
        data["dateOpened"] = this.dateOpened ? this.dateOpened.toISOString() : null;
        data["moPayment"] = this.moPayment !== undefined ? this.moPayment : null;
        data["paymentStatus"] = this.paymentStatus !== undefined ? this.paymentStatus : null;
        data["terms"] = this.terms !== undefined ? this.terms : null;
        data["comment"] = this.comment !== undefined ? this.comment : null;
        data["maxAccountHistoryDate"] = this.maxAccountHistoryDate ? this.maxAccountHistoryDate.toISOString() : null;
        if (this.twoYearHistory && this.twoYearHistory.constructor === Array) {
            data["twoYearHistory"] = [];
            for (let item of this.twoYearHistory)
                data["twoYearHistory"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AccountInfoDto(JSON.parse(json));
    }
}

export class AccountCreditHistoryDto { 
    year: number; 
    month: number; 
    status: string; 
    statusType: AccountCreditHistoryDtoStatusType;
    constructor(data?: any) {
        if (data !== undefined) {
            this.year = data["year"] !== undefined ? data["year"] : null;
            this.month = data["month"] !== undefined ? data["month"] : null;
            this.status = data["status"] !== undefined ? data["status"] : null;
            this.statusType = data["statusType"] !== undefined ? data["statusType"] : null;
        }
    }

    static fromJS(data: any): AccountCreditHistoryDto {
        return new AccountCreditHistoryDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["year"] = this.year !== undefined ? this.year : null;
        data["month"] = this.month !== undefined ? this.month : null;
        data["status"] = this.status !== undefined ? this.status : null;
        data["statusType"] = this.statusType !== undefined ? this.statusType : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AccountCreditHistoryDto(JSON.parse(json));
    }
}

export class ListResultDtoOfEditionListDto { 
    items: EditionListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        return new ListResultDtoOfEditionListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfEditionListDto(JSON.parse(json));
    }
}

export class EditionListDto { 
    name: string; 
    displayName: string; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EditionListDto {
        return new EditionListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditionListDto(JSON.parse(json));
    }
}

export class GetEditionForEditOutput { 
    edition: EditionEditDto; 
    featureValues: NameValueDto[]; 
    features: FlatFeatureDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : null;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionForEditOutput {
        return new GetEditionForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["edition"] = this.edition ? this.edition.toJS() : null;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetEditionForEditOutput(JSON.parse(json));
    }
}

export class EditionEditDto { 
    id: number; 
    displayName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
        }
    }

    static fromJS(data: any): EditionEditDto {
        return new EditionEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditionEditDto(JSON.parse(json));
    }
}

export class FlatFeatureDto { 
    parentName: string; 
    name: string; 
    displayName: string; 
    description: string; 
    defaultValue: string; 
    inputType: IInputType;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.defaultValue = data["defaultValue"] !== undefined ? data["defaultValue"] : null;
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : null;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        return new FlatFeatureDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentName"] = this.parentName !== undefined ? this.parentName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["defaultValue"] = this.defaultValue !== undefined ? this.defaultValue : null;
        data["inputType"] = this.inputType ? this.inputType.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FlatFeatureDto(JSON.parse(json));
    }
}

export class IInputType { 
    name: string; 
    attributes: { [key: string] : any; }; 
    validator: IValueValidator;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : null;
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : null;
        }
    }

    static fromJS(data: any): IInputType {
        return new IInputType(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key] !== undefined ? this.attributes[key] : null;
            }
        }
        data["validator"] = this.validator ? this.validator.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IInputType(JSON.parse(json));
    }
}

export class IValueValidator { 
    name: string; 
    attributes: { [key: string] : any; };
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : null;
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        return new IValueValidator(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key] !== undefined ? this.attributes[key] : null;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IValueValidator(JSON.parse(json));
    }
}

export class CreateOrUpdateEditionDto { 
    edition: EditionEditDto = new EditionEditDto(); 
    featureValues: NameValueDto[] = [];
    constructor(data?: any) {
        if (data !== undefined) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        return new CreateOrUpdateEditionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["edition"] = this.edition ? this.edition.toJS() : null;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateEditionDto(JSON.parse(json));
    }
}

export class CreateFriendshipRequestInput { 
    userId: number; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        return new CreateFriendshipRequestInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateFriendshipRequestInput(JSON.parse(json));
    }
}

export class CreateFriendshipRequestByUserNameInput { 
    tenancyName: string; 
    userName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        return new CreateFriendshipRequestByUserNameInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateFriendshipRequestByUserNameInput(JSON.parse(json));
    }
}

export class BlockUserInput { 
    userId: number; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): BlockUserInput {
        return new BlockUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new BlockUserInput(JSON.parse(json));
    }
}

export class UnblockUserInput { 
    userId: number; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): UnblockUserInput {
        return new UnblockUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UnblockUserInput(JSON.parse(json));
    }
}

export class AcceptFriendshipRequestInput { 
    userId: number; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        return new AcceptFriendshipRequestInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AcceptFriendshipRequestInput(JSON.parse(json));
    }
}

export class HostSettingsEditDto { 
    general: GeneralSettingsEditDto = new GeneralSettingsEditDto(); 
    userManagement: HostUserManagementSettingsEditDto = new HostUserManagementSettingsEditDto(); 
    email: EmailSettingsEditDto = new EmailSettingsEditDto(); 
    tenantManagement: TenantManagementSettingsEditDto = new TenantManagementSettingsEditDto(); 
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    constructor(data?: any) {
        if (data !== undefined) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        return new HostSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["general"] = this.general ? this.general.toJS() : null;
        data["userManagement"] = this.userManagement ? this.userManagement.toJS() : null;
        data["email"] = this.email ? this.email.toJS() : null;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJS() : null;
        data["security"] = this.security ? this.security.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HostSettingsEditDto(JSON.parse(json));
    }
}

export class GeneralSettingsEditDto { 
    timezone: string; 
    timezoneForComparison: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.timezone = data["timezone"] !== undefined ? data["timezone"] : null;
            this.timezoneForComparison = data["timezoneForComparison"] !== undefined ? data["timezoneForComparison"] : null;
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        return new GeneralSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["timezone"] = this.timezone !== undefined ? this.timezone : null;
        data["timezoneForComparison"] = this.timezoneForComparison !== undefined ? this.timezoneForComparison : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GeneralSettingsEditDto(JSON.parse(json));
    }
}

export class HostUserManagementSettingsEditDto { 
    isEmailConfirmationRequiredForLogin: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"] !== undefined ? data["isEmailConfirmationRequiredForLogin"] : null;
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        return new HostUserManagementSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin !== undefined ? this.isEmailConfirmationRequiredForLogin : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new HostUserManagementSettingsEditDto(JSON.parse(json));
    }
}

export class EmailSettingsEditDto { 
    defaultFromAddress: string; 
    defaultFromDisplayName: string; 
    smtpHost: string; 
    smtpPort: number; 
    smtpUserName: string; 
    smtpPassword: string; 
    smtpDomain: string; 
    smtpEnableSsl: boolean; 
    smtpUseDefaultCredentials: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.defaultFromAddress = data["defaultFromAddress"] !== undefined ? data["defaultFromAddress"] : null;
            this.defaultFromDisplayName = data["defaultFromDisplayName"] !== undefined ? data["defaultFromDisplayName"] : null;
            this.smtpHost = data["smtpHost"] !== undefined ? data["smtpHost"] : null;
            this.smtpPort = data["smtpPort"] !== undefined ? data["smtpPort"] : null;
            this.smtpUserName = data["smtpUserName"] !== undefined ? data["smtpUserName"] : null;
            this.smtpPassword = data["smtpPassword"] !== undefined ? data["smtpPassword"] : null;
            this.smtpDomain = data["smtpDomain"] !== undefined ? data["smtpDomain"] : null;
            this.smtpEnableSsl = data["smtpEnableSsl"] !== undefined ? data["smtpEnableSsl"] : null;
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"] !== undefined ? data["smtpUseDefaultCredentials"] : null;
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        return new EmailSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["defaultFromAddress"] = this.defaultFromAddress !== undefined ? this.defaultFromAddress : null;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName !== undefined ? this.defaultFromDisplayName : null;
        data["smtpHost"] = this.smtpHost !== undefined ? this.smtpHost : null;
        data["smtpPort"] = this.smtpPort !== undefined ? this.smtpPort : null;
        data["smtpUserName"] = this.smtpUserName !== undefined ? this.smtpUserName : null;
        data["smtpPassword"] = this.smtpPassword !== undefined ? this.smtpPassword : null;
        data["smtpDomain"] = this.smtpDomain !== undefined ? this.smtpDomain : null;
        data["smtpEnableSsl"] = this.smtpEnableSsl !== undefined ? this.smtpEnableSsl : null;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials !== undefined ? this.smtpUseDefaultCredentials : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EmailSettingsEditDto(JSON.parse(json));
    }
}

export class TenantManagementSettingsEditDto { 
    allowSelfRegistration: boolean; 
    isNewRegisteredTenantActiveByDefault: boolean; 
    useCaptchaOnRegistration: boolean; 
    defaultEditionId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.allowSelfRegistration = data["allowSelfRegistration"] !== undefined ? data["allowSelfRegistration"] : null;
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"] !== undefined ? data["isNewRegisteredTenantActiveByDefault"] : null;
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"] !== undefined ? data["useCaptchaOnRegistration"] : null;
            this.defaultEditionId = data["defaultEditionId"] !== undefined ? data["defaultEditionId"] : null;
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        return new TenantManagementSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["allowSelfRegistration"] = this.allowSelfRegistration !== undefined ? this.allowSelfRegistration : null;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault !== undefined ? this.isNewRegisteredTenantActiveByDefault : null;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration !== undefined ? this.useCaptchaOnRegistration : null;
        data["defaultEditionId"] = this.defaultEditionId !== undefined ? this.defaultEditionId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantManagementSettingsEditDto(JSON.parse(json));
    }
}

export class SecuritySettingsEditDto { 
    useDefaultPasswordComplexitySettings: boolean; 
    passwordComplexity: PasswordComplexitySetting; 
    defaultPasswordComplexity: PasswordComplexitySetting; 
    userLockOut: UserLockOutSettingsEditDto; 
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
    constructor(data?: any) {
        if (data !== undefined) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"] !== undefined ? data["useDefaultPasswordComplexitySettings"] : null;
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : null;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : null;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : null;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : null;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        return new SecuritySettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings !== undefined ? this.useDefaultPasswordComplexitySettings : null;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJS() : null;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJS() : null;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJS() : null;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SecuritySettingsEditDto(JSON.parse(json));
    }
}

export class PasswordComplexitySetting { 
    requireDigit: boolean; 
    requireLowercase: boolean; 
    requireNonAlphanumeric: boolean; 
    requireUppercase: boolean; 
    requiredLength: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.requireDigit = data["requireDigit"] !== undefined ? data["requireDigit"] : null;
            this.requireLowercase = data["requireLowercase"] !== undefined ? data["requireLowercase"] : null;
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"] !== undefined ? data["requireNonAlphanumeric"] : null;
            this.requireUppercase = data["requireUppercase"] !== undefined ? data["requireUppercase"] : null;
            this.requiredLength = data["requiredLength"] !== undefined ? data["requiredLength"] : null;
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        return new PasswordComplexitySetting(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["requireDigit"] = this.requireDigit !== undefined ? this.requireDigit : null;
        data["requireLowercase"] = this.requireLowercase !== undefined ? this.requireLowercase : null;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric !== undefined ? this.requireNonAlphanumeric : null;
        data["requireUppercase"] = this.requireUppercase !== undefined ? this.requireUppercase : null;
        data["requiredLength"] = this.requiredLength !== undefined ? this.requiredLength : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PasswordComplexitySetting(JSON.parse(json));
    }
}

export class UserLockOutSettingsEditDto { 
    isEnabled: boolean; 
    maxFailedAccessAttemptsBeforeLockout: number; 
    defaultAccountLockoutSeconds: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : null;
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"] !== undefined ? data["maxFailedAccessAttemptsBeforeLockout"] : null;
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"] !== undefined ? data["defaultAccountLockoutSeconds"] : null;
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        return new UserLockOutSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : null;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout !== undefined ? this.maxFailedAccessAttemptsBeforeLockout : null;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds !== undefined ? this.defaultAccountLockoutSeconds : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLockOutSettingsEditDto(JSON.parse(json));
    }
}

export class TwoFactorLoginSettingsEditDto { 
    isEnabledForApplication: boolean; 
    isEnabled: boolean; 
    isEmailProviderEnabled: boolean; 
    isSmsProviderEnabled: boolean; 
    isRememberBrowserEnabled: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabledForApplication = data["isEnabledForApplication"] !== undefined ? data["isEnabledForApplication"] : null;
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : null;
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"] !== undefined ? data["isEmailProviderEnabled"] : null;
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"] !== undefined ? data["isSmsProviderEnabled"] : null;
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"] !== undefined ? data["isRememberBrowserEnabled"] : null;
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        return new TwoFactorLoginSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabledForApplication"] = this.isEnabledForApplication !== undefined ? this.isEnabledForApplication : null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : null;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled !== undefined ? this.isEmailProviderEnabled : null;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled !== undefined ? this.isSmsProviderEnabled : null;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled !== undefined ? this.isRememberBrowserEnabled : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TwoFactorLoginSettingsEditDto(JSON.parse(json));
    }
}

export class SendTestEmailInput { 
    emailAddress: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        return new SendTestEmailInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendTestEmailInput(JSON.parse(json));
    }
}

export class RequestKBAInput { 
    redirectUrl: string; 
    cssUrl: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.redirectUrl = data["redirectUrl"] !== undefined ? data["redirectUrl"] : null;
            this.cssUrl = data["cssUrl"] !== undefined ? data["cssUrl"] : null;
        }
    }

    static fromJS(data: any): RequestKBAInput {
        return new RequestKBAInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["redirectUrl"] = this.redirectUrl !== undefined ? this.redirectUrl : null;
        data["cssUrl"] = this.cssUrl !== undefined ? this.cssUrl : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RequestKBAInput(JSON.parse(json));
    }
}

export class RequestKBAOutput { 
    kbaAlreadyPassed: boolean; 
    kbaUrl: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.kbaAlreadyPassed = data["kbaAlreadyPassed"] !== undefined ? data["kbaAlreadyPassed"] : null;
            this.kbaUrl = data["kbaUrl"] !== undefined ? data["kbaUrl"] : null;
        }
    }

    static fromJS(data: any): RequestKBAOutput {
        return new RequestKBAOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["kbaAlreadyPassed"] = this.kbaAlreadyPassed !== undefined ? this.kbaAlreadyPassed : null;
        data["kbaUrl"] = this.kbaUrl !== undefined ? this.kbaUrl : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RequestKBAOutput(JSON.parse(json));
    }
}

export class KBAResult { 
    memberId: string; 
    passed: boolean; 
    error: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.memberId = data["memberId"] !== undefined ? data["memberId"] : null;
            this.passed = data["passed"] !== undefined ? data["passed"] : null;
            this.error = data["error"] !== undefined ? data["error"] : null;
        }
    }

    static fromJS(data: any): KBAResult {
        return new KBAResult(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["memberId"] = this.memberId !== undefined ? this.memberId : null;
        data["passed"] = this.passed !== undefined ? this.passed : null;
        data["error"] = this.error !== undefined ? this.error : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new KBAResult(JSON.parse(json));
    }
}

export class GetLanguagesOutput { 
    defaultLanguageName: string; 
    items: ApplicationLanguageListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.defaultLanguageName = data["defaultLanguageName"] !== undefined ? data["defaultLanguageName"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        return new GetLanguagesOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["defaultLanguageName"] = this.defaultLanguageName !== undefined ? this.defaultLanguageName : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLanguagesOutput(JSON.parse(json));
    }
}

export class ApplicationLanguageListDto { 
    tenantId: number; 
    name: string; 
    displayName: string; 
    icon: string; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.icon = data["icon"] !== undefined ? data["icon"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        return new ApplicationLanguageListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["icon"] = this.icon !== undefined ? this.icon : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationLanguageListDto(JSON.parse(json));
    }
}

export class GetLanguageForEditOutput { 
    language: ApplicationLanguageEditDto; 
    languageNames: ComboboxItemDto[]; 
    flags: ComboboxItemDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : null;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (let item of data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (let item of data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        return new GetLanguageForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["language"] = this.language ? this.language.toJS() : null;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJS());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLanguageForEditOutput(JSON.parse(json));
    }
}

export class ApplicationLanguageEditDto { 
    id: number; 
    name: string; 
    icon: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.icon = data["icon"] !== undefined ? data["icon"] : null;
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        return new ApplicationLanguageEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["icon"] = this.icon !== undefined ? this.icon : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationLanguageEditDto(JSON.parse(json));
    }
}

export class CreateOrUpdateLanguageInput { 
    language: ApplicationLanguageEditDto = new ApplicationLanguageEditDto();
    constructor(data?: any) {
        if (data !== undefined) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        return new CreateOrUpdateLanguageInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["language"] = this.language ? this.language.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateLanguageInput(JSON.parse(json));
    }
}

export class SetDefaultLanguageInput { 
    name: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        return new SetDefaultLanguageInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetDefaultLanguageInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfLanguageTextListDto { 
    totalCount: number; 
    items: LanguageTextListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        return new PagedResultDtoOfLanguageTextListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfLanguageTextListDto(JSON.parse(json));
    }
}

export class LanguageTextListDto { 
    key: string; 
    baseValue: string; 
    targetValue: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.baseValue = data["baseValue"] !== undefined ? data["baseValue"] : null;
            this.targetValue = data["targetValue"] !== undefined ? data["targetValue"] : null;
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        return new LanguageTextListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["key"] = this.key !== undefined ? this.key : null;
        data["baseValue"] = this.baseValue !== undefined ? this.baseValue : null;
        data["targetValue"] = this.targetValue !== undefined ? this.targetValue : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageTextListDto(JSON.parse(json));
    }
}

export class UpdateLanguageTextInput { 
    languageName: string; 
    sourceName: string; 
    key: string; 
    value: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : null;
            this.sourceName = data["sourceName"] !== undefined ? data["sourceName"] : null;
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.value = data["value"] !== undefined ? data["value"] : null;
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        return new UpdateLanguageTextInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["languageName"] = this.languageName !== undefined ? this.languageName : null;
        data["sourceName"] = this.sourceName !== undefined ? this.sourceName : null;
        data["key"] = this.key !== undefined ? this.key : null;
        data["value"] = this.value !== undefined ? this.value : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateLanguageTextInput(JSON.parse(json));
    }
}

export class MemberInfoDto { 
    registrationId: string; 
    name: string; 
    surname: string; 
    email: string; 
    phone: string; 
    doB: moment.Moment; 
    ssn: string; 
    gender: MemberInfoDtoGender; 
    isUSCitizen: boolean; 
    packageId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.registrationId = data["registrationId"] !== undefined ? data["registrationId"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.email = data["email"] !== undefined ? data["email"] : null;
            this.phone = data["phone"] !== undefined ? data["phone"] : null;
            this.doB = data["doB"] ? moment(data["doB"].toString()) : null;
            this.ssn = data["ssn"] !== undefined ? data["ssn"] : null;
            this.gender = data["gender"] !== undefined ? data["gender"] : null;
            this.isUSCitizen = data["isUSCitizen"] !== undefined ? data["isUSCitizen"] : null;
            this.packageId = data["packageId"] !== undefined ? data["packageId"] : null;
        }
    }

    static fromJS(data: any): MemberInfoDto {
        return new MemberInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["registrationId"] = this.registrationId !== undefined ? this.registrationId : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["email"] = this.email !== undefined ? this.email : null;
        data["phone"] = this.phone !== undefined ? this.phone : null;
        data["doB"] = this.doB ? this.doB.toISOString() : null;
        data["ssn"] = this.ssn !== undefined ? this.ssn : null;
        data["gender"] = this.gender !== undefined ? this.gender : null;
        data["isUSCitizen"] = this.isUSCitizen !== undefined ? this.isUSCitizen : null;
        data["packageId"] = this.packageId !== undefined ? this.packageId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MemberInfoDto(JSON.parse(json));
    }
}

export class SubmitMemberInfoResultDto { 
    paymentAuthorizationRequired: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.paymentAuthorizationRequired = data["paymentAuthorizationRequired"] !== undefined ? data["paymentAuthorizationRequired"] : null;
        }
    }

    static fromJS(data: any): SubmitMemberInfoResultDto {
        return new SubmitMemberInfoResultDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["paymentAuthorizationRequired"] = this.paymentAuthorizationRequired !== undefined ? this.paymentAuthorizationRequired : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SubmitMemberInfoResultDto(JSON.parse(json));
    }
}

export class PaymentAuthorizeRequestDto { 
    registrationId: string; 
    packageId: number; 
    creditCard: CreditCardDto = new CreditCardDto();
    constructor(data?: any) {
        if (data !== undefined) {
            this.registrationId = data["registrationId"] !== undefined ? data["registrationId"] : null;
            this.packageId = data["packageId"] !== undefined ? data["packageId"] : null;
            this.creditCard = data["creditCard"] ? CreditCardDto.fromJS(data["creditCard"]) : new CreditCardDto();
        }
    }

    static fromJS(data: any): PaymentAuthorizeRequestDto {
        return new PaymentAuthorizeRequestDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["registrationId"] = this.registrationId !== undefined ? this.registrationId : null;
        data["packageId"] = this.packageId !== undefined ? this.packageId : null;
        data["creditCard"] = this.creditCard ? this.creditCard.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PaymentAuthorizeRequestDto(JSON.parse(json));
    }
}

export class CreditCardDto { 
    holderName: string; 
    number: string; 
    expirationMonth: string; 
    expirationYear: string; 
    cvv: string; 
    billingAddress: string; 
    billingZip: string; 
    billingCity: string; 
    billingStateCode: string; 
    billingState: string; 
    billingCountryCode: string; 
    billingCountry: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.holderName = data["holderName"] !== undefined ? data["holderName"] : null;
            this.number = data["number"] !== undefined ? data["number"] : null;
            this.expirationMonth = data["expirationMonth"] !== undefined ? data["expirationMonth"] : null;
            this.expirationYear = data["expirationYear"] !== undefined ? data["expirationYear"] : null;
            this.cvv = data["cvv"] !== undefined ? data["cvv"] : null;
            this.billingAddress = data["billingAddress"] !== undefined ? data["billingAddress"] : null;
            this.billingZip = data["billingZip"] !== undefined ? data["billingZip"] : null;
            this.billingCity = data["billingCity"] !== undefined ? data["billingCity"] : null;
            this.billingStateCode = data["billingStateCode"] !== undefined ? data["billingStateCode"] : null;
            this.billingState = data["billingState"] !== undefined ? data["billingState"] : null;
            this.billingCountryCode = data["billingCountryCode"] !== undefined ? data["billingCountryCode"] : null;
            this.billingCountry = data["billingCountry"] !== undefined ? data["billingCountry"] : null;
        }
    }

    static fromJS(data: any): CreditCardDto {
        return new CreditCardDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["holderName"] = this.holderName !== undefined ? this.holderName : null;
        data["number"] = this.number !== undefined ? this.number : null;
        data["expirationMonth"] = this.expirationMonth !== undefined ? this.expirationMonth : null;
        data["expirationYear"] = this.expirationYear !== undefined ? this.expirationYear : null;
        data["cvv"] = this.cvv !== undefined ? this.cvv : null;
        data["billingAddress"] = this.billingAddress !== undefined ? this.billingAddress : null;
        data["billingZip"] = this.billingZip !== undefined ? this.billingZip : null;
        data["billingCity"] = this.billingCity !== undefined ? this.billingCity : null;
        data["billingStateCode"] = this.billingStateCode !== undefined ? this.billingStateCode : null;
        data["billingState"] = this.billingState !== undefined ? this.billingState : null;
        data["billingCountryCode"] = this.billingCountryCode !== undefined ? this.billingCountryCode : null;
        data["billingCountry"] = this.billingCountry !== undefined ? this.billingCountry : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreditCardDto(JSON.parse(json));
    }
}

export class PaymentAuthorizeResponseDto { 
    success: boolean; 
    errors: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.success = data["success"] !== undefined ? data["success"] : null;
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (let item of data["errors"])
                    this.errors.push(item);
            }
        }
    }

    static fromJS(data: any): PaymentAuthorizeResponseDto {
        return new PaymentAuthorizeResponseDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["success"] = this.success !== undefined ? this.success : null;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PaymentAuthorizeResponseDto(JSON.parse(json));
    }
}

export class RegisterMemberRequest { 
    password: string; 
    registrationId: string; 
    name: string; 
    surname: string; 
    email: string; 
    phone: string; 
    doB: moment.Moment; 
    ssn: string; 
    gender: RegisterMemberRequestGender; 
    isUSCitizen: boolean; 
    packageId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.registrationId = data["registrationId"] !== undefined ? data["registrationId"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.email = data["email"] !== undefined ? data["email"] : null;
            this.phone = data["phone"] !== undefined ? data["phone"] : null;
            this.doB = data["doB"] ? moment(data["doB"].toString()) : null;
            this.ssn = data["ssn"] !== undefined ? data["ssn"] : null;
            this.gender = data["gender"] !== undefined ? data["gender"] : null;
            this.isUSCitizen = data["isUSCitizen"] !== undefined ? data["isUSCitizen"] : null;
            this.packageId = data["packageId"] !== undefined ? data["packageId"] : null;
        }
    }

    static fromJS(data: any): RegisterMemberRequest {
        return new RegisterMemberRequest(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["password"] = this.password !== undefined ? this.password : null;
        data["registrationId"] = this.registrationId !== undefined ? this.registrationId : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["email"] = this.email !== undefined ? this.email : null;
        data["phone"] = this.phone !== undefined ? this.phone : null;
        data["doB"] = this.doB ? this.doB.toISOString() : null;
        data["ssn"] = this.ssn !== undefined ? this.ssn : null;
        data["gender"] = this.gender !== undefined ? this.gender : null;
        data["isUSCitizen"] = this.isUSCitizen !== undefined ? this.isUSCitizen : null;
        data["packageId"] = this.packageId !== undefined ? this.packageId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterMemberRequest(JSON.parse(json));
    }
}

export class CountryStateDto { 
    code: string; 
    name: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.code = data["code"] !== undefined ? data["code"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
        }
    }

    static fromJS(data: any): CountryStateDto {
        return new CountryStateDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["code"] = this.code !== undefined ? this.code : null;
        data["name"] = this.name !== undefined ? this.name : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CountryStateDto(JSON.parse(json));
    }
}

export class GetNotificationsOutput { 
    unreadCount: number; 
    totalCount: number; 
    items: UserNotification[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.unreadCount = data["unreadCount"] !== undefined ? data["unreadCount"] : null;
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        return new GetNotificationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["unreadCount"] = this.unreadCount !== undefined ? this.unreadCount : null;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetNotificationsOutput(JSON.parse(json));
    }
}

export class UserNotification { 
    tenantId: number; 
    userId: number; 
    state: UserNotificationState; 
    notification: TenantNotification; 
    id: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.state = data["state"] !== undefined ? data["state"] : null;
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserNotification {
        return new UserNotification(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["state"] = this.state !== undefined ? this.state : null;
        data["notification"] = this.notification ? this.notification.toJS() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserNotification(JSON.parse(json));
    }
}

export class TenantNotification { 
    tenantId: number; 
    notificationName: string; 
    data: NotificationData; 
    entityType: string; 
    entityTypeName: string; 
    entityId: any; 
    severity: TenantNotificationSeverity; 
    creationTime: moment.Moment; 
    id: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.notificationName = data["notificationName"] !== undefined ? data["notificationName"] : null;
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : null;
            this.entityType = data["entityType"] !== undefined ? data["entityType"] : null;
            this.entityTypeName = data["entityTypeName"] !== undefined ? data["entityTypeName"] : null;
            if (data["entityId"]) {
                this.entityId = {};
                for (let key in data["entityId"]) {
                    if (data["entityId"].hasOwnProperty(key))
                        this.entityId[key] = data["entityId"][key] !== undefined ? data["entityId"][key] : null;
                }
            }
            this.severity = data["severity"] !== undefined ? data["severity"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantNotification {
        return new TenantNotification(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["notificationName"] = this.notificationName !== undefined ? this.notificationName : null;
        data["data"] = this.data ? this.data.toJS() : null;
        data["entityType"] = this.entityType !== undefined ? this.entityType : null;
        data["entityTypeName"] = this.entityTypeName !== undefined ? this.entityTypeName : null;
        if (this.entityId) {
            data["entityId"] = {};
            for (let key in this.entityId) {
                if (this.entityId.hasOwnProperty(key))
                    data["entityId"][key] = this.entityId[key] !== undefined ? this.entityId[key] : null;
            }
        }
        data["severity"] = this.severity !== undefined ? this.severity : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantNotification(JSON.parse(json));
    }
}

export class NotificationData { 
    type: string; 
    properties: { [key: string] : any; };
    constructor(data?: any) {
        if (data !== undefined) {
            this.type = data["type"] !== undefined ? data["type"] : null;
            if (data["properties"]) {
                this.properties = {};
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key] !== undefined ? data["properties"][key] : null;
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        return new NotificationData(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["type"] = this.type !== undefined ? this.type : null;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key] !== undefined ? this.properties[key] : null;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NotificationData(JSON.parse(json));
    }
}

export class EntityDtoOfGuid { 
    id: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        return new EntityDtoOfGuid(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDtoOfGuid(JSON.parse(json));
    }
}

export class GetNotificationSettingsOutput { 
    receiveNotifications: boolean; 
    notifications: NotificationSubscriptionWithDisplayNameDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.receiveNotifications = data["receiveNotifications"] !== undefined ? data["receiveNotifications"] : null;
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        return new GetNotificationSettingsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["receiveNotifications"] = this.receiveNotifications !== undefined ? this.receiveNotifications : null;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetNotificationSettingsOutput(JSON.parse(json));
    }
}

export class NotificationSubscriptionWithDisplayNameDto { 
    displayName: string; 
    description: string; 
    name: string; 
    isSubscribed: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.isSubscribed = data["isSubscribed"] !== undefined ? data["isSubscribed"] : null;
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        return new NotificationSubscriptionWithDisplayNameDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["isSubscribed"] = this.isSubscribed !== undefined ? this.isSubscribed : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NotificationSubscriptionWithDisplayNameDto(JSON.parse(json));
    }
}

export class UpdateNotificationSettingsInput { 
    receiveNotifications: boolean; 
    notifications: NotificationSubscriptionDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.receiveNotifications = data["receiveNotifications"] !== undefined ? data["receiveNotifications"] : null;
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        return new UpdateNotificationSettingsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["receiveNotifications"] = this.receiveNotifications !== undefined ? this.receiveNotifications : null;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateNotificationSettingsInput(JSON.parse(json));
    }
}

export class NotificationSubscriptionDto { 
    name: string; 
    isSubscribed: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.isSubscribed = data["isSubscribed"] !== undefined ? data["isSubscribed"] : null;
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        return new NotificationSubscriptionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["isSubscribed"] = this.isSubscribed !== undefined ? this.isSubscribed : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new NotificationSubscriptionDto(JSON.parse(json));
    }
}

export class ListResultDtoOfOrganizationUnitDto { 
    items: OrganizationUnitDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        return new ListResultDtoOfOrganizationUnitDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfOrganizationUnitDto(JSON.parse(json));
    }
}

export class OrganizationUnitDto { 
    parentId: number; 
    code: string; 
    displayName: string; 
    memberCount: number; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : null;
            this.code = data["code"] !== undefined ? data["code"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.memberCount = data["memberCount"] !== undefined ? data["memberCount"] : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        return new OrganizationUnitDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : null;
        data["code"] = this.code !== undefined ? this.code : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["memberCount"] = this.memberCount !== undefined ? this.memberCount : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfOrganizationUnitUserListDto { 
    totalCount: number; 
    items: OrganizationUnitUserListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        return new PagedResultDtoOfOrganizationUnitUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfOrganizationUnitUserListDto(JSON.parse(json));
    }
}

export class OrganizationUnitUserListDto { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    profilePictureId: string; 
    addedTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : null;
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        return new OrganizationUnitUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : null;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitUserListDto(JSON.parse(json));
    }
}

export class CreateOrganizationUnitInput { 
    parentId: number; 
    displayName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        return new CreateOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrganizationUnitInput(JSON.parse(json));
    }
}

export class UpdateOrganizationUnitInput { 
    id: number; 
    displayName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        return new UpdateOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateOrganizationUnitInput(JSON.parse(json));
    }
}

export class MoveOrganizationUnitInput { 
    id: number; 
    newParentId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.newParentId = data["newParentId"] !== undefined ? data["newParentId"] : null;
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        return new MoveOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["newParentId"] = this.newParentId !== undefined ? this.newParentId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MoveOrganizationUnitInput(JSON.parse(json));
    }
}

export class UserToOrganizationUnitInput { 
    userId: number; 
    organizationUnitId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.organizationUnitId = data["organizationUnitId"] !== undefined ? data["organizationUnitId"] : null;
        }
    }

    static fromJS(data: any): UserToOrganizationUnitInput {
        return new UserToOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["organizationUnitId"] = this.organizationUnitId !== undefined ? this.organizationUnitId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserToOrganizationUnitInput(JSON.parse(json));
    }
}

export class ListResultDtoOfPackageDto { 
    items: PackageDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PackageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPackageDto {
        return new ListResultDtoOfPackageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfPackageDto(JSON.parse(json));
    }
}

export class PackageDto { 
    tenantId: number; 
    name: string; 
    idcsPackageId: number; 
    description: string; 
    initialPaymentAmount: number; 
    trialPeriodDays: number; 
    monthlyPaymentAmount: number; 
    isActive: boolean; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.idcsPackageId = data["idcsPackageId"] !== undefined ? data["idcsPackageId"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.initialPaymentAmount = data["initialPaymentAmount"] !== undefined ? data["initialPaymentAmount"] : null;
            this.trialPeriodDays = data["trialPeriodDays"] !== undefined ? data["trialPeriodDays"] : null;
            this.monthlyPaymentAmount = data["monthlyPaymentAmount"] !== undefined ? data["monthlyPaymentAmount"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): PackageDto {
        return new PackageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["idcsPackageId"] = this.idcsPackageId !== undefined ? this.idcsPackageId : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["initialPaymentAmount"] = this.initialPaymentAmount !== undefined ? this.initialPaymentAmount : null;
        data["trialPeriodDays"] = this.trialPeriodDays !== undefined ? this.trialPeriodDays : null;
        data["monthlyPaymentAmount"] = this.monthlyPaymentAmount !== undefined ? this.monthlyPaymentAmount : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PackageDto(JSON.parse(json));
    }
}

export class ListResultDtoOfFlatPermissionWithLevelDto { 
    items: FlatPermissionWithLevelDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        return new ListResultDtoOfFlatPermissionWithLevelDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfFlatPermissionWithLevelDto(JSON.parse(json));
    }
}

export class FlatPermissionWithLevelDto { 
    level: number; 
    parentName: string; 
    name: string; 
    displayName: string; 
    description: string; 
    isGrantedByDefault: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.level = data["level"] !== undefined ? data["level"] : null;
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.isGrantedByDefault = data["isGrantedByDefault"] !== undefined ? data["isGrantedByDefault"] : null;
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        return new FlatPermissionWithLevelDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["level"] = this.level !== undefined ? this.level : null;
        data["parentName"] = this.parentName !== undefined ? this.parentName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["isGrantedByDefault"] = this.isGrantedByDefault !== undefined ? this.isGrantedByDefault : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FlatPermissionWithLevelDto(JSON.parse(json));
    }
}

export class CurrentUserProfileEditDto { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    phoneNumber: string; 
    timezone: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.timezone = data["timezone"] !== undefined ? data["timezone"] : null;
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        return new CurrentUserProfileEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["timezone"] = this.timezone !== undefined ? this.timezone : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CurrentUserProfileEditDto(JSON.parse(json));
    }
}

export class ChangePasswordInput { 
    currentPassword: string; 
    newPassword: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.currentPassword = data["currentPassword"] !== undefined ? data["currentPassword"] : null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : null;
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        return new ChangePasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangePasswordInput(JSON.parse(json));
    }
}

export class UpdateProfilePictureInput { 
    fileName: string; 
    x: number; 
    y: number; 
    width: number; 
    height: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.fileName = data["fileName"] !== undefined ? data["fileName"] : null;
            this.x = data["x"] !== undefined ? data["x"] : null;
            this.y = data["y"] !== undefined ? data["y"] : null;
            this.width = data["width"] !== undefined ? data["width"] : null;
            this.height = data["height"] !== undefined ? data["height"] : null;
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        return new UpdateProfilePictureInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["fileName"] = this.fileName !== undefined ? this.fileName : null;
        data["x"] = this.x !== undefined ? this.x : null;
        data["y"] = this.y !== undefined ? this.y : null;
        data["width"] = this.width !== undefined ? this.width : null;
        data["height"] = this.height !== undefined ? this.height : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateProfilePictureInput(JSON.parse(json));
    }
}

export class GetPasswordComplexitySettingOutput { 
    setting: PasswordComplexitySetting;
    constructor(data?: any) {
        if (data !== undefined) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : null;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        return new GetPasswordComplexitySettingOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["setting"] = this.setting ? this.setting.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetPasswordComplexitySettingOutput(JSON.parse(json));
    }
}

export class GetProfilePictureOutput { 
    profilePicture: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.profilePicture = data["profilePicture"] !== undefined ? data["profilePicture"] : null;
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        return new GetProfilePictureOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["profilePicture"] = this.profilePicture !== undefined ? this.profilePicture : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetProfilePictureOutput(JSON.parse(json));
    }
}

export class ChangeUserLanguageDto { 
    languageName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : null;
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        return new ChangeUserLanguageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["languageName"] = this.languageName !== undefined ? this.languageName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangeUserLanguageDto(JSON.parse(json));
    }
}

export class ListResultDtoOfRoleListDto { 
    items: RoleListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleListDto {
        return new ListResultDtoOfRoleListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfRoleListDto(JSON.parse(json));
    }
}

export class RoleListDto { 
    name: string; 
    displayName: string; 
    isStatic: boolean; 
    isDefault: boolean; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : null;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): RoleListDto {
        return new RoleListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleListDto(JSON.parse(json));
    }
}

export class GetRoleForEditOutput { 
    role: RoleEditDto; 
    permissions: FlatPermissionDto[]; 
    grantedPermissionNames: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : null;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        return new GetRoleForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["role"] = this.role ? this.role.toJS() : null;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetRoleForEditOutput(JSON.parse(json));
    }
}

export class RoleEditDto { 
    id: number; 
    displayName: string; 
    isDefault: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : null;
        }
    }

    static fromJS(data: any): RoleEditDto {
        return new RoleEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleEditDto(JSON.parse(json));
    }
}

export class FlatPermissionDto { 
    parentName: string; 
    name: string; 
    displayName: string; 
    description: string; 
    isGrantedByDefault: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentName = data["parentName"] !== undefined ? data["parentName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.isGrantedByDefault = data["isGrantedByDefault"] !== undefined ? data["isGrantedByDefault"] : null;
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        return new FlatPermissionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentName"] = this.parentName !== undefined ? this.parentName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["isGrantedByDefault"] = this.isGrantedByDefault !== undefined ? this.isGrantedByDefault : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FlatPermissionDto(JSON.parse(json));
    }
}

export class CreateOrUpdateRoleInput { 
    role: RoleEditDto = new RoleEditDto(); 
    grantedPermissionNames: string[] = [];
    constructor(data?: any) {
        if (data !== undefined) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        return new CreateOrUpdateRoleInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["role"] = this.role ? this.role.toJS() : null;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateRoleInput(JSON.parse(json));
    }
}

export class GetCurrentLoginInformationsOutput { 
    user: UserLoginInfoDto; 
    tenant: TenantLoginInfoDto; 
    application: ApplicationInfoDto;
    constructor(data?: any) {
        if (data !== undefined) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : null;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : null;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : null;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        return new GetCurrentLoginInformationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["user"] = this.user ? this.user.toJS() : null;
        data["tenant"] = this.tenant ? this.tenant.toJS() : null;
        data["application"] = this.application ? this.application.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetCurrentLoginInformationsOutput(JSON.parse(json));
    }
}

export class UserLoginInfoDto { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    profilePictureId: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        return new UserLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoDto(JSON.parse(json));
    }
}

export class TenantLoginInfoDto { 
    tenancyName: string; 
    name: string; 
    editionDisplayName: string; 
    logoId: string; 
    logoFileType: string; 
    customCssId: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.editionDisplayName = data["editionDisplayName"] !== undefined ? data["editionDisplayName"] : null;
            this.logoId = data["logoId"] !== undefined ? data["logoId"] : null;
            this.logoFileType = data["logoFileType"] !== undefined ? data["logoFileType"] : null;
            this.customCssId = data["customCssId"] !== undefined ? data["customCssId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        return new TenantLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["editionDisplayName"] = this.editionDisplayName !== undefined ? this.editionDisplayName : null;
        data["logoId"] = this.logoId !== undefined ? this.logoId : null;
        data["logoFileType"] = this.logoFileType !== undefined ? this.logoFileType : null;
        data["customCssId"] = this.customCssId !== undefined ? this.customCssId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantLoginInfoDto(JSON.parse(json));
    }
}

export class ApplicationInfoDto { 
    version: string; 
    releaseDate: moment.Moment; 
    features: { [key: string] : boolean; };
    constructor(data?: any) {
        if (data !== undefined) {
            this.version = data["version"] !== undefined ? data["version"] : null;
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : null;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key] !== undefined ? data["features"][key] : null;
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        return new ApplicationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["version"] = this.version !== undefined ? this.version : null;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : null;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : null;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationInfoDto(JSON.parse(json));
    }
}

export class PagedResultDtoOfTenantListDto { 
    totalCount: number; 
    items: TenantListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        return new PagedResultDtoOfTenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfTenantListDto(JSON.parse(json));
    }
}

export class TenantListDto { 
    tenancyName: string; 
    name: string; 
    editionDisplayName: string; 
    connectionString: string; 
    isActive: boolean; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.editionDisplayName = data["editionDisplayName"] !== undefined ? data["editionDisplayName"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantListDto {
        return new TenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["editionDisplayName"] = this.editionDisplayName !== undefined ? this.editionDisplayName : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantListDto(JSON.parse(json));
    }
}

export class CreateTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    adminPassword: string; 
    connectionString: string; 
    shouldChangePasswordOnNextLogin: boolean; 
    sendActivationEmail: boolean; 
    editionId: number; 
    isActive: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.adminPassword = data["adminPassword"] !== undefined ? data["adminPassword"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"] !== undefined ? data["shouldChangePasswordOnNextLogin"] : null;
            this.sendActivationEmail = data["sendActivationEmail"] !== undefined ? data["sendActivationEmail"] : null;
            this.editionId = data["editionId"] !== undefined ? data["editionId"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
        }
    }

    static fromJS(data: any): CreateTenantInput {
        return new CreateTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["adminPassword"] = this.adminPassword !== undefined ? this.adminPassword : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin !== undefined ? this.shouldChangePasswordOnNextLogin : null;
        data["sendActivationEmail"] = this.sendActivationEmail !== undefined ? this.sendActivationEmail : null;
        data["editionId"] = this.editionId !== undefined ? this.editionId : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateTenantInput(JSON.parse(json));
    }
}

export class TenantEditDto { 
    tenancyName: string; 
    name: string; 
    connectionString: string; 
    editionId: number; 
    isActive: boolean; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.editionId = data["editionId"] !== undefined ? data["editionId"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantEditDto {
        return new TenantEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["editionId"] = this.editionId !== undefined ? this.editionId : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantEditDto(JSON.parse(json));
    }
}

export class GetTenantFeaturesForEditOutput { 
    featureValues: NameValueDto[]; 
    features: FlatFeatureDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesForEditOutput {
        return new GetTenantFeaturesForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetTenantFeaturesForEditOutput(JSON.parse(json));
    }
}

export class UpdateTenantFeaturesInput { 
    id: number; 
    featureValues: NameValueDto[] = [];
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        return new UpdateTenantFeaturesInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateTenantFeaturesInput(JSON.parse(json));
    }
}

export class EntityDto { 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EntityDto {
        return new EntityDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDto(JSON.parse(json));
    }
}

export class GetMemberActivityOutput { 
    totalMembers: number[]; 
    newMembers: number[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["totalMembers"] && data["totalMembers"].constructor === Array) {
                this.totalMembers = [];
                for (let item of data["totalMembers"])
                    this.totalMembers.push(item);
            }
            if (data["newMembers"] && data["newMembers"].constructor === Array) {
                this.newMembers = [];
                for (let item of data["newMembers"])
                    this.newMembers.push(item);
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        return new GetMemberActivityOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.totalMembers && this.totalMembers.constructor === Array) {
            data["totalMembers"] = [];
            for (let item of this.totalMembers)
                data["totalMembers"].push(item);
        }
        if (this.newMembers && this.newMembers.constructor === Array) {
            data["newMembers"] = [];
            for (let item of this.newMembers)
                data["newMembers"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetMemberActivityOutput(JSON.parse(json));
    }
}

export class TenantApiHostOutput { 
    hostName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.hostName = data["hostName"] !== undefined ? data["hostName"] : null;
        }
    }

    static fromJS(data: any): TenantApiHostOutput {
        return new TenantApiHostOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["hostName"] = this.hostName !== undefined ? this.hostName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantApiHostOutput(JSON.parse(json));
    }
}

export class RegisterTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    adminPassword: string; 
    captchaResponse: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.adminPassword = data["adminPassword"] !== undefined ? data["adminPassword"] : null;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : null;
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        return new RegisterTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["adminPassword"] = this.adminPassword !== undefined ? this.adminPassword : null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterTenantInput(JSON.parse(json));
    }
}

export class RegisterTenantOutput { 
    tenantId: number; 
    tenancyName: string; 
    name: string; 
    userName: string; 
    emailAddress: string; 
    isTenantActive: boolean; 
    isActive: boolean; 
    isEmailConfirmationRequired: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isTenantActive = data["isTenantActive"] !== undefined ? data["isTenantActive"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"] !== undefined ? data["isEmailConfirmationRequired"] : null;
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        return new RegisterTenantOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isTenantActive"] = this.isTenantActive !== undefined ? this.isTenantActive : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired !== undefined ? this.isEmailConfirmationRequired : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterTenantOutput(JSON.parse(json));
    }
}

export class TenantSettingsEditDto { 
    general: GeneralSettingsEditDto; 
    userManagement: TenantUserManagementSettingsEditDto = new TenantUserManagementSettingsEditDto(); 
    email: EmailSettingsEditDto; 
    ldap: LdapSettingsEditDto; 
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    constructor(data?: any) {
        if (data !== undefined) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : null;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : null;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : null;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        return new TenantSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["general"] = this.general ? this.general.toJS() : null;
        data["userManagement"] = this.userManagement ? this.userManagement.toJS() : null;
        data["email"] = this.email ? this.email.toJS() : null;
        data["ldap"] = this.ldap ? this.ldap.toJS() : null;
        data["security"] = this.security ? this.security.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantSettingsEditDto(JSON.parse(json));
    }
}

export class TenantUserManagementSettingsEditDto { 
    allowSelfRegistration: boolean; 
    isNewRegisteredUserActiveByDefault: boolean; 
    isEmailConfirmationRequiredForLogin: boolean; 
    useCaptchaOnRegistration: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.allowSelfRegistration = data["allowSelfRegistration"] !== undefined ? data["allowSelfRegistration"] : null;
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"] !== undefined ? data["isNewRegisteredUserActiveByDefault"] : null;
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"] !== undefined ? data["isEmailConfirmationRequiredForLogin"] : null;
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"] !== undefined ? data["useCaptchaOnRegistration"] : null;
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        return new TenantUserManagementSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["allowSelfRegistration"] = this.allowSelfRegistration !== undefined ? this.allowSelfRegistration : null;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault !== undefined ? this.isNewRegisteredUserActiveByDefault : null;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin !== undefined ? this.isEmailConfirmationRequiredForLogin : null;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration !== undefined ? this.useCaptchaOnRegistration : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantUserManagementSettingsEditDto(JSON.parse(json));
    }
}

export class LdapSettingsEditDto { 
    isModuleEnabled: boolean; 
    isEnabled: boolean; 
    domain: string; 
    userName: string; 
    password: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isModuleEnabled = data["isModuleEnabled"] !== undefined ? data["isModuleEnabled"] : null;
            this.isEnabled = data["isEnabled"] !== undefined ? data["isEnabled"] : null;
            this.domain = data["domain"] !== undefined ? data["domain"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        return new LdapSettingsEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isModuleEnabled"] = this.isModuleEnabled !== undefined ? this.isModuleEnabled : null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : null;
        data["domain"] = this.domain !== undefined ? this.domain : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LdapSettingsEditDto(JSON.parse(json));
    }
}

export class IdcsSettingsDto { 
    requestSource: string; 
    partnerCode: string; 
    partnerAccount: string; 
    password: string; 
    branding: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.requestSource = data["requestSource"] !== undefined ? data["requestSource"] : null;
            this.partnerCode = data["partnerCode"] !== undefined ? data["partnerCode"] : null;
            this.partnerAccount = data["partnerAccount"] !== undefined ? data["partnerAccount"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.branding = data["branding"] !== undefined ? data["branding"] : null;
        }
    }

    static fromJS(data: any): IdcsSettingsDto {
        return new IdcsSettingsDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["requestSource"] = this.requestSource !== undefined ? this.requestSource : null;
        data["partnerCode"] = this.partnerCode !== undefined ? this.partnerCode : null;
        data["partnerAccount"] = this.partnerAccount !== undefined ? this.partnerAccount : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["branding"] = this.branding !== undefined ? this.branding : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IdcsSettingsDto(JSON.parse(json));
    }
}

export class ListResultDtoOfNameValueDto { 
    items: NameValueDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        return new ListResultDtoOfNameValueDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfNameValueDto(JSON.parse(json));
    }
}

export class AuthenticateModel { 
    userNameOrEmailAddress: string; 
    password: string; 
    twoFactorVerificationCode: string; 
    rememberClient: boolean; 
    twoFactorRememberClientToken: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"] !== undefined ? data["userNameOrEmailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"] !== undefined ? data["twoFactorVerificationCode"] : null;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : null;
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"] !== undefined ? data["twoFactorRememberClientToken"] : null;
        }
    }

    static fromJS(data: any): AuthenticateModel {
        return new AuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode !== undefined ? this.twoFactorVerificationCode : null;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : null;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken !== undefined ? this.twoFactorRememberClientToken : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateModel(JSON.parse(json));
    }
}

export class AuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    shouldResetPassword: boolean; 
    passwordResetCode: string; 
    userId: number; 
    requiresTwoFactorVerification: boolean; 
    twoFactorAuthProviders: string[]; 
    twoFactorRememberClientToken: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.shouldResetPassword = data["shouldResetPassword"] !== undefined ? data["shouldResetPassword"] : null;
            this.passwordResetCode = data["passwordResetCode"] !== undefined ? data["passwordResetCode"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"] !== undefined ? data["requiresTwoFactorVerification"] : null;
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [];
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"] !== undefined ? data["twoFactorRememberClientToken"] : null;
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        return new AuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["shouldResetPassword"] = this.shouldResetPassword !== undefined ? this.shouldResetPassword : null;
        data["passwordResetCode"] = this.passwordResetCode !== undefined ? this.passwordResetCode : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification !== undefined ? this.requiresTwoFactorVerification : null;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken !== undefined ? this.twoFactorRememberClientToken : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateResultModel(JSON.parse(json));
    }
}

export class SendTwoFactorAuthCodeModel { 
    userId: number; 
    provider: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.provider = data["provider"] !== undefined ? data["provider"] : null;
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        return new SendTwoFactorAuthCodeModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["provider"] = this.provider !== undefined ? this.provider : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SendTwoFactorAuthCodeModel(JSON.parse(json));
    }
}

export class ImpersonatedAuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        return new ImpersonatedAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ImpersonatedAuthenticateResultModel(JSON.parse(json));
    }
}

export class SwitchedAccountAuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        return new SwitchedAccountAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SwitchedAccountAuthenticateResultModel(JSON.parse(json));
    }
}

export class ExternalLoginProviderInfoModel { 
    name: string; 
    clientId: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : null;
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        return new ExternalLoginProviderInfoModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["clientId"] = this.clientId !== undefined ? this.clientId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginProviderInfoModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateModel { 
    authProvider: string; 
    providerKey: string; 
    providerAccessCode: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : null;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : null;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        return new ExternalAuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : null;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    waitingForActivation: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        return new ExternalAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateResultModel(JSON.parse(json));
    }
}

export class PagedResultDtoOfUserListDto { 
    totalCount: number; 
    items: UserListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        return new PagedResultDtoOfUserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfUserListDto(JSON.parse(json));
    }
}

export class UserListDto { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    phoneNumber: string; 
    profilePictureId: string; 
    isEmailConfirmed: boolean; 
    roles: UserListRoleDto[]; 
    lastLoginTime: moment.Moment; 
    isActive: boolean; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : null;
            this.isEmailConfirmed = data["isEmailConfirmed"] !== undefined ? data["isEmailConfirmed"] : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserListDto {
        return new UserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : null;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserListDto(JSON.parse(json));
    }
}

export class UserListRoleDto { 
    roleId: number; 
    roleName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : null;
        }
    }

    static fromJS(data: any): UserListRoleDto {
        return new UserListRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["roleId"] = this.roleId !== undefined ? this.roleId : null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserListRoleDto(JSON.parse(json));
    }
}

export class GetUserForEditOutput { 
    profilePictureId: string; 
    user: UserEditDto; 
    roles: UserRoleDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.profilePictureId = data["profilePictureId"] !== undefined ? data["profilePictureId"] : null;
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        return new GetUserForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : null;
        data["user"] = this.user ? this.user.toJS() : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUserForEditOutput(JSON.parse(json));
    }
}

export class UserEditDto { 
    id: number; 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    phoneNumber: string; 
    password: string; 
    isActive: boolean; 
    shouldChangePasswordOnNextLogin: boolean; 
    isTwoFactorEnabled: boolean; 
    isLockoutEnabled: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"] !== undefined ? data["shouldChangePasswordOnNextLogin"] : null;
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"] !== undefined ? data["isTwoFactorEnabled"] : null;
            this.isLockoutEnabled = data["isLockoutEnabled"] !== undefined ? data["isLockoutEnabled"] : null;
        }
    }

    static fromJS(data: any): UserEditDto {
        return new UserEditDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin !== undefined ? this.shouldChangePasswordOnNextLogin : null;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled !== undefined ? this.isTwoFactorEnabled : null;
        data["isLockoutEnabled"] = this.isLockoutEnabled !== undefined ? this.isLockoutEnabled : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserEditDto(JSON.parse(json));
    }
}

export class UserRoleDto { 
    roleId: number; 
    roleName: string; 
    roleDisplayName: string; 
    isAssigned: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : null;
            this.roleName = data["roleName"] !== undefined ? data["roleName"] : null;
            this.roleDisplayName = data["roleDisplayName"] !== undefined ? data["roleDisplayName"] : null;
            this.isAssigned = data["isAssigned"] !== undefined ? data["isAssigned"] : null;
        }
    }

    static fromJS(data: any): UserRoleDto {
        return new UserRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["roleId"] = this.roleId !== undefined ? this.roleId : null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : null;
        data["roleDisplayName"] = this.roleDisplayName !== undefined ? this.roleDisplayName : null;
        data["isAssigned"] = this.isAssigned !== undefined ? this.isAssigned : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserRoleDto(JSON.parse(json));
    }
}

export class GetUserPermissionsForEditOutput { 
    permissions: FlatPermissionDto[]; 
    grantedPermissionNames: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        return new GetUserPermissionsForEditOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetUserPermissionsForEditOutput(JSON.parse(json));
    }
}

export class EntityDtoOfInt64 { 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        return new EntityDtoOfInt64(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EntityDtoOfInt64(JSON.parse(json));
    }
}

export class UpdateUserPermissionsInput { 
    id: number; 
    grantedPermissionNames: string[] = [];
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        return new UpdateUserPermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateUserPermissionsInput(JSON.parse(json));
    }
}

export class CreateOrUpdateUserInput { 
    user: UserEditDto = new UserEditDto(); 
    assignedRoleNames: string[] = []; 
    sendActivationEmail: boolean; 
    setRandomPassword: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"] !== undefined ? data["sendActivationEmail"] : null;
            this.setRandomPassword = data["setRandomPassword"] !== undefined ? data["setRandomPassword"] : null;
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        return new CreateOrUpdateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["user"] = this.user ? this.user.toJS() : null;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail !== undefined ? this.sendActivationEmail : null;
        data["setRandomPassword"] = this.setRandomPassword !== undefined ? this.setRandomPassword : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateOrUpdateUserInput(JSON.parse(json));
    }
}

export class LinkToUserInput { 
    tenancyName: string; 
    usernameOrEmailAddress: string; 
    password: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"] !== undefined ? data["usernameOrEmailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
        }
    }

    static fromJS(data: any): LinkToUserInput {
        return new LinkToUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress !== undefined ? this.usernameOrEmailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LinkToUserInput(JSON.parse(json));
    }
}

export class PagedResultDtoOfLinkedUserDto { 
    totalCount: number; 
    items: LinkedUserDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : null;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        return new PagedResultDtoOfLinkedUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : null;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new PagedResultDtoOfLinkedUserDto(JSON.parse(json));
    }
}

export class LinkedUserDto { 
    tenantId: number; 
    tenancyName: string; 
    username: string; 
    lastLoginTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.username = data["username"] !== undefined ? data["username"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): LinkedUserDto {
        return new LinkedUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["username"] = this.username !== undefined ? this.username : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LinkedUserDto(JSON.parse(json));
    }
}

export class ListResultDtoOfLinkedUserDto { 
    items: LinkedUserDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        return new ListResultDtoOfLinkedUserDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfLinkedUserDto(JSON.parse(json));
    }
}

export class UnlinkUserInput { 
    tenantId: number; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        return new UnlinkUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UnlinkUserInput(JSON.parse(json));
    }
}

export class ListResultDtoOfUserLoginAttemptDto { 
    items: UserLoginAttemptDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        return new ListResultDtoOfUserLoginAttemptDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ListResultDtoOfUserLoginAttemptDto(JSON.parse(json));
    }
}

export class UserLoginAttemptDto { 
    tenancyName: string; 
    userNameOrEmail: string; 
    clientIpAddress: string; 
    clientName: string; 
    browserInfo: string; 
    result: string; 
    creationTime: moment.Moment;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.userNameOrEmail = data["userNameOrEmail"] !== undefined ? data["userNameOrEmail"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.result = data["result"] !== undefined ? data["result"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        return new UserLoginAttemptDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["userNameOrEmail"] = this.userNameOrEmail !== undefined ? this.userNameOrEmail : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["result"] = this.result !== undefined ? this.result : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginAttemptDto(JSON.parse(json));
    }
}

export class EmailValidationDto { 
    result: boolean; 
    message: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.result = data["result"] !== undefined ? data["result"] : null;
            this.message = data["message"] !== undefined ? data["message"] : null;
        }
    }

    static fromJS(data: any): EmailValidationDto {
        return new EmailValidationDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["result"] = this.result !== undefined ? this.result : null;
        data["message"] = this.message !== undefined ? this.message : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EmailValidationDto(JSON.parse(json));
    }
}

export class GetLatestWebLogsOutput { 
    latesWebLogLines: string[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["latesWebLogLines"] && data["latesWebLogLines"].constructor === Array) {
                this.latesWebLogLines = [];
                for (let item of data["latesWebLogLines"])
                    this.latesWebLogLines.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        return new GetLatestWebLogsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.latesWebLogLines && this.latesWebLogLines.constructor === Array) {
            data["latesWebLogLines"] = [];
            for (let item of this.latesWebLogLines)
                data["latesWebLogLines"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetLatestWebLogsOutput(JSON.parse(json));
    }
}

export enum State {
    _0 = 0, 
    _1 = 1, 
}

export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum FriendDtoState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoSide {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReadState {
    _1 = 1, 
    _2 = 2, 
}

export enum AccountDtoState {
    _0 = 0, 
    _1 = 1, 
}

export enum AlertDtoType {
    _0 = 0, 
    _1 = 1, 
}

export enum AccountInfoDtoStatus {
    _0 = 0, 
    _1 = 1, 
}

export enum AccountCreditHistoryDtoStatusType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
    _8 = 8, 
    _9 = 9, 
    _10 = 10, 
    _11 = 11, 
}

export enum MemberInfoDtoGender {
    _0 = 0, 
    _1 = 1, 
}

export enum RegisterMemberRequestGender {
    _0 = 0, 
    _1 = 1, 
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result?: any; 

    constructor(message: string, status: number, response: string, result?: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}