/** Core imports */
import { Component, ElementRef, forwardRef, HostListener, Input, OnInit, Output, EventEmitter } from '@angular/core';
import { ControlValueAccessor, FormControl, Validator, ValidationErrors, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';

/** Third party imports */
import * as glibphone from 'google-libphonenumber';

/** Application imports */
import { Country } from './country.model';
import { CountryService } from './country.service';
import { phoneMask } from './country.mask';
import { AppConsts } from '@shared/AppConsts';

const PLUS = '+';

const COUNTER_CONTROL_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => PhoneNumberComponent),
    multi: true
};


const VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => PhoneNumberComponent),
    multi: true
};

@Component({
    moduleId: module.id,
    selector: 'international-phone-number',
    templateUrl: './phone-number.component.html',
    styleUrls: [
        './phone-number.component.scss',
        './assets/css/flags.min.css'
    ],
    host: {
        '(document:click)': 'hideDropdown($event)',
    },
    providers: [COUNTER_CONTROL_ACCESSOR, VALIDATOR]
})
export class PhoneNumberComponent implements OnInit, ControlValueAccessor, Validator {

    //input
    @Input() placeholder = 'Enter phone number'; //default
    @Input() maxlength = 15; //default

    @Input() defaultCountry: string;
    @Input() required: boolean;
    @Input() disabled = false;
    @Input() allowDropdown = true;

    @Output() onKeyUp = new EventEmitter();
    @Output() onFocusIn = new EventEmitter();
    @Output() onFocusOut = new EventEmitter();

    // ELEMENT REF
    phoneComponent: ElementRef;

    // CONTROL VALUE ACCESSOR FUNCTIONS
    onTouch: Function;
    onModelChange: Function;

    countries: Country[];
    selectedCountry: Country;
    countryFilter: string;
    showDropdown = false;
    phoneNumber = '';

    value = '';

    constructor(private countryService: CountryService, phoneComponent: ElementRef) {
        this.phoneComponent = phoneComponent;
    }

    ngOnInit(): void {
        this.countries = this.countryService.getCountries();
        this.orderCountriesByName();
    }

    /**
     * Opens the country selection dropdown
     */
    displayDropDown() {
        if (this.allowDropdown && !this.disabled) {
            this.showDropdown = !this.showDropdown;
            this.countryFilter = '';
        }
    }

    /**
     * Hides the country selection dropdown
     * @param event
     */
    hideDropdown(event: Event) {
        if (!this.phoneComponent.nativeElement.contains(event.target)) {
            this.showDropdown = false;
        }
    }

    /**
     * Sets the selected country code to given country
     * @param event
     * @param countryCode
     */
    updateSelectedCountry(event: Event, countryCode: string) {
        event.preventDefault();
        this.updatePhoneInput(countryCode);

        this.updateValue();
    }


    /**
     * Updates the phone number
     * @param event
     */
    updatePhoneNumber(event: Event) {
        if (PhoneNumberComponent.startsWithPlus(this.phoneNumber)) {
            this.findPrefix(this.phoneNumber.split(PLUS)[1]);
        } else {
            this.selectedCountry = null;
        }

        this.updateValue();
    }

    /**
     * shows the dropdown with keyboard event
     * @param event
     */
    @HostListener('document:keypress', ['$event'])
    handleKeyboardEvent(event: KeyboardEvent) {
        if (this.showDropdown) {
            this.countryFilter = `${this.countryFilter}${event.key}`;
        }
    }

    /**
     * @param prefix
     */
    private findPrefix(prefix: string) {
        let foundPrefixes: Country[] = this.countries.filter((country: Country) => prefix.startsWith(country.dialCode));
        if (foundPrefixes && foundPrefixes.length)
            this.selectedCountry = PhoneNumberComponent.reducePrefixes(foundPrefixes);
        else
            this.selectedCountry = null;
    }

    /**
     * Sort countries by name
     */
    private orderCountriesByName() {
        this.countries = this.countries.sort(function (a, b) { return (a['name'] > b['name']) ? 1 : ((b['name'] > a['name']) ? -1 : 0); });
    }

    /**
     * @param fn
     */
    registerOnTouched(fn: Function) {
        this.onTouch = fn;
    }

    /**
     * @param fn
     */
    registerOnChange(fn: Function) {
        this.onModelChange = fn;
    }

    /**
     * @param value
     */

    writeValue(value: string) {
        this.value = value || '';
        this.phoneNumber = this.value;
        if (PhoneNumberComponent.startsWithPlus(this.value)) {
            this.findPrefix(this.value.split(PLUS)[1]);
            if (this.selectedCountry) {
                this.updatePhoneInput(this.selectedCountry.countryCode);
            }
        }

        if (!this.selectedCountry && this.defaultCountry) {
            this.updatePhoneInput(this.defaultCountry);
        }
    }

    /**
     * Validation
     * @param c
     */
    validate(c: FormControl): ValidationErrors | null {
        let value = this.getCleanNumber(c.value);
        let validationError: ValidationErrors = {
            phoneEmptyError: {
                valid: false
            }
        };

        if (this.required && !value) {
            return validationError;
        }

        if (value) {
            // validating number using the google's lib phone
            value = this.getCleanNumber(c.value, false);
            const phoneUtil = glibphone.PhoneNumberUtil.getInstance();
            try {
                let phoneNumber = phoneUtil.parse(value);
                let isValidNumber = phoneUtil.isValidNumber(phoneNumber);
                return isValidNumber ? null : validationError;
            } catch (ex) {
                return validationError;
            }
        }
        return null;
    }

    paste(event) {
        let value = event.clipboardData.getData('text/plain');
        if (value) {
            this.phoneNumber = value.replace(/^00/, '+');
            this.updatePhoneNumber(null);
        }
    }

    keyDown(event) {
        let input = event.target;
        if (event.key) {
            let updateValue = false;
            if (/\D/.test(event.key)) {
                if (!input.value && event.key == '+' || event.keyCode == 9/*Tab*/ ||
                    event.ctrlKey && event.keyCode == 86/*V*/ || event.shiftKey && event.keyCode == 45/*Insert*/
                ) return;

                if (event.keyCode == 8/* Backspace */) {
                    let clearValue = this.getCleanNumber(input.value).slice(0, -1);
                    input.value = this.getInputMaskValue(clearValue);
                    updateValue = !clearValue;
                }
            } else if (this.selectedCountry)
                input.value = input.value.replace('_', event.key);

            this.phoneNumber = input.value;
            if (updateValue || input.value.indexOf('_') < 0)
                this.updateValue();

            event.stopPropagation();
            event.preventDefault();
        }
        this.updateCaretPosition(input);
    }

    keyUp(event) {
        this.onKeyUp.emit(event);
    }

    focusIn(event) {
        this.updateCaretPosition(event.target);
        setTimeout(() => this.onFocusIn.emit(event));
    }

    focusOut(event) {
        this.updateValue();
        setTimeout(() => this.onFocusOut.emit(event));
    }

    private setCaretPosition(ctrl, pos) {
        // Modern browsers
        if (ctrl.setSelectionRange) {
            ctrl.setSelectionRange(pos, pos);

        // IE8 and below
        } else if (ctrl.createTextRange) {
            let range = ctrl.createTextRange();
            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    }

    private updateCaretPosition(input) {
        let caretPosition = input.value.indexOf('_');
        if (caretPosition > 0) {
            input.style.caretColor = 'transparent';
            setTimeout(() => {
                this.setCaretPosition(input, caretPosition);
                input.style.caretColor = 'auto';
            });
        }
    }

    private getCleanNumber(value, excluedCountryCode = true) {
        let result = (value || '').replace(/[^0-9\+]/g, '');
        if (excluedCountryCode && this.selectedCountry)
            result = result.replace(PLUS + this.selectedCountry.dialCode, '');
        return result;
    }

    /**
     * Updates the value and trigger changes
     */
    private updateValue() {
        this.value = this.getCleanNumber(this.phoneNumber, false);
        if (!PhoneNumberComponent.startsWithPlus(this.value))
            this.value = AppConsts.defaultCountryCode + this.value;
        this.onModelChange(this.value);
        this.onTouch();
    }

    /**
     * Updates the input
     * @param countryCode
     */
    private updatePhoneInput(countryCode: string) {
        this.showDropdown = false;

        let newInputValue: string = this.getCleanNumber(this.phoneNumber);
        this.selectedCountry = this.countries.find((country: Country) => country.countryCode === countryCode);
        this.phoneNumber = this.selectedCountry ? this.getInputMaskValue(newInputValue) : newInputValue;
    }

    private getInputMaskValue(newValue) {
        let maskedValue = newValue;
        if (this.selectedCountry) {
            maskedValue = phoneMask[this.selectedCountry.countryCode];
            newValue.replace(/\D/g, '').split('').forEach((diget) => {
                maskedValue = maskedValue.replace('_', diget);
            });
        }
        return maskedValue;
    }


    /**
     * Util function to check if given text starts with plus sign
     * @param text
     */
    private static startsWithPlus(text: string): boolean {
        return text.startsWith(PLUS);
    }

    /**
     * Returns the selected country's dialcode
     */
    private getSelectedCountryDialCode(): string {
        if (this.selectedCountry)
            return PLUS + this.selectedCountry.dialCode;
        return null;
    }

    /**
     * Reduced the prefixes
     * @param foundPrefixes
     */
    private static reducePrefixes(foundPrefixes: Country[]) {
        return foundPrefixes.reduce(
            (first: Country, second: Country) =>
                first.dialCode.length > second.dialCode.length
                    ? first
                    : second
        );
    }
}
